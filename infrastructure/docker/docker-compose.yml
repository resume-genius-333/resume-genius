# Docker Compose for Resume Genius Development
# LiteLLM local services are available behind an opt-in compose profile

services:
  # LiteLLM Proxy Service (opt-in via --profile litellm-local)
  litellm:
    profiles: [litellm-local]
    image: ghcr.io/berriai/litellm:main-stable
    container_name: litellm-proxy
    ports:
      - "4000:4000"
    volumes:
      - ./litellm-config.yaml:/app/config.yaml
    command:
      ["--config", "/app/config.yaml", "--port", "4000", "--num_workers", "1"]
    environment:
      - LITELLM_MASTER_KEY=${LITELLM_MASTER_KEY:-sk-1234} # CHANGEME
      - DATABASE_URL=postgresql://${LITELLM_POSTGRES_USER}:${LITELLM_POSTGRES_PASSWORD}@litellm-postgres:5432/${LITELLM_POSTGRES_DB}
      # API Keys for providers
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - GROQ_API_KEY=${GROQ_API_KEY}
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - PERPLEXITYAI_API_KEY=${PERPLEXITYAI_API_KEY}
      - XAI_API_KEY=${XAI_API_KEY}
      # - LANGFUSE_SECRET_KEY=${LANGFUSE_SECRET_KEY}
      # - LANGFUSE_PUBLIC_KEY=${LANGFUSE_PUBLIC_KEY}
      # - LANGFUSE_HOST=${LANGFUSE_HOST}
    depends_on:
      litellm-postgres:
        condition: service_healthy
    restart: unless-stopped

  # PostgreSQL Database for LiteLLM (opt-in via --profile litellm-local)
  litellm-postgres:
    profiles: [litellm-local]
    image: postgres:16-alpine
    container_name: litellm-postgres
    restart: always
    environment:
      POSTGRES_USER: ${LITELLM_POSTGRES_USER}
      POSTGRES_PASSWORD: ${LITELLM_POSTGRES_PASSWORD} # CHANGEME
      POSTGRES_DB: ${LITELLM_POSTGRES_DB}
    volumes:
      - litellm_postgres_data:/var/lib/postgresql/data
    ports:
      - "127.0.0.1:5440:5432" # Exposed locally on port 5440 for debugging
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL Database for Resume Genius
  resume-genius-postgres:
    image: pgvector/pgvector:pg16
    container_name: resume-genius-postgres
    restart: always
    environment:
      POSTGRES_USER: ${BACKEND_POSTGRES_USER}
      POSTGRES_PASSWORD: ${BACKEND_POSTGRES_PASSWORD:-postgres} # CHANGEME
      POSTGRES_DB: ${BACKEND_POSTGRES_DB}
    volumes:
      - resume_genius_postgres_data:/var/lib/postgresql/data
    ports:
      - "127.0.0.1:5441:5432" # Exposed locally on port 5441
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Service for Pub/Sub messaging
  resume-genius-redis:
    image: redis:7-alpine
    container_name: resume-genius-redis
    restart: unless-stopped
    ports:
      - "127.0.0.1:6380:6379" # Exposed locally on port 6380
    volumes:
      - resume_genius_redis_data:/data
    command: redis-server --appendonly yes --appendfsync everysec
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Frontend Service (Development with hot reload)
  frontend:
    build:
      context: ../../apps/frontend
      dockerfile: Dockerfile.dev
    container_name: resume-genius-frontend
    ports:
      - "3000:3000"
    volumes:
      # Mount source code for hot reload
      - ../../apps/frontend:/app
      # Anonymous volume for node_modules to avoid conflicts
      - /app/node_modules
      # Mount .next for faster rebuilds
      - /app/.next
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_BACKEND_URL=${NEXT_PUBLIC_BACKEND_URL}
    depends_on:
      - backend
    restart: unless-stopped

  # Backend Service (Development with hot reload)
  backend:
    build:
      context: ../../apps/backend
      dockerfile: Dockerfile.dev
    container_name: resume-genius-backend
    ports:
      - "8000:8000"
    volumes:
      # Mount source code for hot reload
      - ../../apps/backend:/app
      # Anonymous volume for .venv to avoid conflicts
      - /app/.venv
    environment:
      - DOCKER_CONTAINER=true
      - LITELLM_API_KEY=${LITELLM_API_KEY}
      - LITELLM_BASE_URL_DOCKER=${LITELLM_BASE_URL_DOCKER}
      - LITELLM_BASE_URL_LOCAL=${LITELLM_BASE_URL_LOCAL}
      # Database configuration components
      - BACKEND_POSTGRES_USER=${BACKEND_POSTGRES_USER}
      - BACKEND_POSTGRES_PASSWORD=${BACKEND_POSTGRES_PASSWORD}
      - BACKEND_POSTGRES_DB=${BACKEND_POSTGRES_DB}
      - BACKEND_POSTGRES_HOST_DOCKER=${BACKEND_POSTGRES_HOST_DOCKER}
      - BACKEND_POSTGRES_HOST_LOCAL=${BACKEND_POSTGRES_HOST_LOCAL}
      - BACKEND_POSTGRES_PORT_DOCKER=${BACKEND_POSTGRES_PORT_DOCKER}
      - BACKEND_POSTGRES_PORT_LOCAL=${BACKEND_POSTGRES_PORT_LOCAL}
      - BACKEND_DATABASE_ECHO=${BACKEND_DATABASE_ECHO:-false}
      # Auth configuration
      - BACKEND_JWT_SECRET_KEY=${BACKEND_JWT_SECRET_KEY:-changeme}
      - BACKEND_JWT_ALGORITHM=${BACKEND_JWT_ALGORITHM:-HS256}
      - BACKEND_ACCESS_TOKEN_EXPIRE_MINUTES=${BACKEND_ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      - BACKEND_REFRESH_TOKEN_EXPIRE_DAYS=${BACKEND_REFRESH_TOKEN_EXPIRE_DAYS:-7}
      - BACKEND_PASSWORD_RESET_TOKEN_EXPIRE_HOURS=${BACKEND_PASSWORD_RESET_TOKEN_EXPIRE_HOURS:-24}
      - BACKEND_EMAIL_VERIFICATION_TOKEN_EXPIRE_HOURS=${BACKEND_EMAIL_VERIFICATION_TOKEN_EXPIRE_HOURS:-48}
      # Redis configuration components
      - BACKEND_REDIS_HOST_DOCKER=${BACKEND_REDIS_HOST_DOCKER}
      - BACKEND_REDIS_HOST_LOCAL=${BACKEND_REDIS_HOST_LOCAL}
      - BACKEND_REDIS_PORT_DOCKER=${BACKEND_REDIS_PORT_DOCKER}
      - BACKEND_REDIS_PORT_LOCAL=${BACKEND_REDIS_PORT_LOCAL}
      - BACKEND_REDIS_DB=${BACKEND_REDIS_DB:-0}
      - BACKEND_REDIS_MAX_CONNECTIONS=${BACKEND_REDIS_MAX_CONNECTIONS:-50}
      - BACKEND_REDIS_ENCODING=${BACKEND_REDIS_ENCODING:-utf-8}
      - BACKEND_REDIS_DECODE_RESPONSES=${BACKEND_REDIS_DECODE_RESPONSES:-true}
      - BACKEND_REDIS_SOCKET_CONNECT_TIMEOUT=${BACKEND_REDIS_SOCKET_CONNECT_TIMEOUT:-5}
      - BACKEND_REDIS_SOCKET_TIMEOUT=${BACKEND_REDIS_SOCKET_TIMEOUT:-5}
      - BACKEND_REDIS_RETRY_ON_TIMEOUT=${BACKEND_REDIS_RETRY_ON_TIMEOUT:-true}
      - BACKEND_REDIS_HEALTH_CHECK_INTERVAL=${BACKEND_REDIS_HEALTH_CHECK_INTERVAL:-30}
      - PYTHONUNBUFFERED=1
      # Langfuse configuration components
      - LANGFUSE_SECRET_KEY=${LANGFUSE_SECRET_KEY}
      - LANGFUSE_PUBLIC_KEY=${LANGFUSE_PUBLIC_KEY}
      - LANGFUSE_HOST=${LANGFUSE_HOST}
    depends_on:
      resume-genius-postgres:
        condition: service_healthy
      resume-genius-redis:
        condition: service_healthy
    restart: unless-stopped

volumes:
  litellm_postgres_data:
    driver: local
  resume_genius_postgres_data:
    driver: local
  resume_genius_redis_data:
    driver: local
