# Docker Compose for LiteLLM Proxy
# Simplified configuration without Langfuse

services:
  # LiteLLM Proxy Service
  litellm:
    image: ghcr.io/berriai/litellm:main-stable
    container_name: litellm-proxy
    ports:
      - "4000:4000"
    volumes:
      - ./litellm-config.yaml:/app/config.yaml
    command: [ "--config", "/app/config.yaml", "--port", "4000", "--num_workers", "1" ]
    environment:
      - LITELLM_MASTER_KEY=${LITELLM_MASTER_KEY:-sk-1234}  # CHANGEME
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/litellm
      # API Keys for providers
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - GROQ_API_KEY=${GROQ_API_KEY}
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - PERPLEXITYAI_API_KEY=${PERPLEXITYAI_API_KEY}
      - XAI_API_KEY=${XAI_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  # PostgreSQL Database for LiteLLM
  postgres:
    image: postgres:16-alpine
    container_name: litellm-postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}  # CHANGEME
      POSTGRES_DB: litellm
    volumes:
      - litellm_postgres_data:/var/lib/postgresql/data
    ports:
      - "127.0.0.1:5440:5432"  # Exposed locally on port 5440 for debugging
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL Database for Resume Genius
  resume-genius-postgres:
    image: pgvector/pgvector:pg16
    container_name: resume-genius-postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${RESUME_GENIUS_POSTGRES_PASSWORD:-postgres}  # CHANGEME
      POSTGRES_DB: resume_genius
    volumes:
      - resume_genius_postgres_data:/var/lib/postgresql/data
    ports:
      - "127.0.0.1:5441:5432"  # Exposed locally on port 5441
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Service for Pub/Sub messaging
  resume-genius-redis:
    image: redis:7-alpine
    container_name: resume-genius-redis
    restart: unless-stopped
    ports:
      - "127.0.0.1:6380:6379"  # Exposed locally on port 6380
    volumes:
      - resume_genius_redis_data:/data
    command: redis-server --appendonly yes --appendfsync everysec
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Frontend Service (Development with hot reload)
  frontend:
    build:
      context: ../../apps/frontend
      dockerfile: Dockerfile.dev
    container_name: resume-genius-frontend
    ports:
      - "3000:3000"
    volumes:
      # Mount source code for hot reload
      - ../../apps/frontend:/app
      # Anonymous volume for node_modules to avoid conflicts
      - /app/node_modules
      # Mount .next for faster rebuilds
      - /app/.next
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://backend:8000
    depends_on:
      - backend
    restart: unless-stopped

  # Backend Service (Development with hot reload)
  backend:
    build:
      context: ../../apps/backend
      dockerfile: Dockerfile.dev
    container_name: resume-genius-backend
    ports:
      - "8000:8000"
    volumes:
      # Mount source code for hot reload
      - ../../apps/backend:/app
      # Anonymous volume for .venv to avoid conflicts
      - /app/.venv
    environment:
      - LITELLM_API_KEY=${LITELLM_MASTER_KEY}
      - LITELLM_BASE_URL=http://litellm:4000
      - DATABASE_URL=postgresql+asyncpg://postgres:${RESUME_GENIUS_POSTGRES_PASSWORD:-postgres}@resume-genius-postgres:5432/resume_genius
      - DATABASE_SYNC_URL=postgresql://postgres:${RESUME_GENIUS_POSTGRES_PASSWORD:-postgres}@resume-genius-postgres:5432/resume_genius
      - DATABASE_ECHO=${DATABASE_ECHO:-false}
      - PYTHONUNBUFFERED=1
      - REDIS_URL=redis://resume-genius-redis:6379/0
    depends_on:
      resume-genius-postgres:
        condition: service_healthy
      resume-genius-redis:
        condition: service_healthy
      litellm:
        condition: service_started
    restart: unless-stopped

volumes:
  litellm_postgres_data:
    driver: local
  resume_genius_postgres_data:
    driver: local
  resume_genius_redis_data:
    driver: local