/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Resume Genius API
 * OpenAPI spec version: 1.0.0
 */
import { z as zod } from "zod";

/**
 * Register a new user.
 * @summary Register
 */
export const registerApiV1AuthRegisterPostQueryParams = zod.object({
  session_factory: zod.any().optional(),
  jwt_secret_key: zod.any().optional(),
  jwt_algorithm: zod.any().optional(),
  access_token_expire_minutes: zod.any().optional(),
  refresh_token_expire_days: zod.any().optional(),
  password_reset_token_expire_hours: zod.any().optional(),
  email_verification_token_expire_hours: zod.any().optional(),
});

export const registerApiV1AuthRegisterPostBodyPasswordMin = 8;
export const registerApiV1AuthRegisterPostBodyFirstNameMax = 100;
export const registerApiV1AuthRegisterPostBodyLastNameMaxOne = 100;

export const registerApiV1AuthRegisterPostBody = zod
  .object({
    email: zod.email().describe("User email address"),
    password: zod
      .string()
      .min(registerApiV1AuthRegisterPostBodyPasswordMin)
      .describe("User password"),
    first_name: zod
      .string()
      .min(1)
      .max(registerApiV1AuthRegisterPostBodyFirstNameMax)
      .describe("First name"),
    last_name: zod
      .union([
        zod.string().max(registerApiV1AuthRegisterPostBodyLastNameMaxOne),
        zod.null(),
      ])
      .optional()
      .describe("Last name"),
  })
  .describe("User registration request schema.");

/**
 * Login user and create session.
 * @summary Login
 */
export const loginApiV1AuthLoginPostQueryParams = zod.object({
  session_factory: zod.any().optional(),
  jwt_secret_key: zod.any().optional(),
  jwt_algorithm: zod.any().optional(),
  access_token_expire_minutes: zod.any().optional(),
  refresh_token_expire_days: zod.any().optional(),
  password_reset_token_expire_hours: zod.any().optional(),
  email_verification_token_expire_hours: zod.any().optional(),
});

export const loginApiV1AuthLoginPostBodyRememberMeDefault = false;

export const loginApiV1AuthLoginPostBody = zod
  .object({
    email: zod.email().describe("User email address"),
    password: zod.string().describe("User password"),
    remember_me: zod.boolean().optional().describe("Extended session duration"),
  })
  .describe("User login request schema.");

export const loginApiV1AuthLoginPostResponseTokenTypeDefault = "bearer";

export const loginApiV1AuthLoginPostResponse = zod
  .object({
    access_token: zod.string().describe("JWT access token"),
    refresh_token: zod.string().describe("JWT refresh token"),
    token_type: zod
      .string()
      .default(loginApiV1AuthLoginPostResponseTokenTypeDefault)
      .describe("Token type"),
    expires_in: zod.number().describe("Access token expiration in seconds"),
  })
  .describe("User login response schema.");

/**
 * OAuth2 compatible token endpoint for Swagger UI authentication.

This endpoint accepts username (email) and password via form data
and returns an access token in OAuth2 format.
 * @summary Token
 */
export const tokenApiV1AuthTokenPostQueryParams = zod.object({
  session_factory: zod.any().optional(),
  jwt_secret_key: zod.any().optional(),
  jwt_algorithm: zod.any().optional(),
  access_token_expire_minutes: zod.any().optional(),
  refresh_token_expire_days: zod.any().optional(),
  password_reset_token_expire_hours: zod.any().optional(),
  email_verification_token_expire_hours: zod.any().optional(),
});

export const tokenApiV1AuthTokenPostResponse = zod.any();

/**
 * Refresh access token using refresh token.
 * @summary Refresh Token
 */
export const refreshTokenApiV1AuthRefreshPostQueryParams = zod.object({
  session_factory: zod.any().optional(),
  jwt_secret_key: zod.any().optional(),
  jwt_algorithm: zod.any().optional(),
  access_token_expire_minutes: zod.any().optional(),
  refresh_token_expire_days: zod.any().optional(),
  password_reset_token_expire_hours: zod.any().optional(),
  email_verification_token_expire_hours: zod.any().optional(),
});

export const refreshTokenApiV1AuthRefreshPostBody = zod
  .object({
    refresh_token: zod.string().describe("JWT refresh token"),
  })
  .describe("Refresh token request schema.");

export const refreshTokenApiV1AuthRefreshPostResponseTokenTypeDefault =
  "bearer";

export const refreshTokenApiV1AuthRefreshPostResponse = zod
  .object({
    access_token: zod.string().describe("New JWT access token"),
    token_type: zod
      .string()
      .default(refreshTokenApiV1AuthRefreshPostResponseTokenTypeDefault)
      .describe("Token type"),
    expires_in: zod.number().describe("Access token expiration in seconds"),
  })
  .describe("Refresh token response schema.");

/**
 * Logout user by revoking tokens.
 * @summary Logout
 */
export const logoutApiV1AuthLogoutPostQueryParams = zod.object({
  jwt_secret_key: zod.any().optional(),
  jwt_algorithm: zod.any().optional(),
  access_token_expire_minutes: zod.any().optional(),
  refresh_token_expire_days: zod.any().optional(),
  password_reset_token_expire_hours: zod.any().optional(),
  email_verification_token_expire_hours: zod.any().optional(),
  session_factory: zod.any().optional(),
});

/**
 * Get current user information.
 * @summary Get Me
 */
export const getMeApiV1AuthMeGetQueryParams = zod.object({
  jwt_secret_key: zod.any().optional(),
  jwt_algorithm: zod.any().optional(),
  access_token_expire_minutes: zod.any().optional(),
  refresh_token_expire_days: zod.any().optional(),
  password_reset_token_expire_hours: zod.any().optional(),
  email_verification_token_expire_hours: zod.any().optional(),
  session_factory: zod.any().optional(),
});

export const getMeApiV1AuthMeGetResponse = zod
  .object({
    id: zod.string().describe("User ID"),
    email: zod.email().describe("User email"),
    first_name: zod.string().describe("First name"),
    last_name: zod
      .union([zod.string(), zod.null()])
      .optional()
      .describe("Last name"),
    full_name: zod
      .union([zod.string(), zod.null()])
      .optional()
      .describe("Full name"),
    name_prefix: zod
      .union([zod.string(), zod.null()])
      .optional()
      .describe("Name prefix"),
    name_suffix: zod
      .union([zod.string(), zod.null()])
      .optional()
      .describe("Name suffix"),
    phone: zod
      .union([zod.string(), zod.null()])
      .optional()
      .describe("Phone number"),
    location: zod
      .union([zod.string(), zod.null()])
      .optional()
      .describe("Location"),
    avatar_url: zod
      .union([zod.string(), zod.null()])
      .optional()
      .describe("Avatar URL"),
    linkedin_url: zod
      .union([zod.string(), zod.null()])
      .optional()
      .describe("LinkedIn URL"),
    github_url: zod
      .union([zod.string(), zod.null()])
      .optional()
      .describe("GitHub URL"),
    portfolio_url: zod
      .union([zod.string(), zod.null()])
      .optional()
      .describe("Portfolio URL"),
    is_active: zod.boolean().describe("Account active status"),
    email_verified: zod.boolean().describe("Email verification status"),
    email_verified_at: zod
      .union([zod.iso.datetime({}), zod.null()])
      .optional()
      .describe("Email verification timestamp"),
    last_login_at: zod
      .union([zod.iso.datetime({}), zod.null()])
      .optional()
      .describe("Last login timestamp"),
    created_at: zod.iso.datetime({}).describe("Account creation timestamp"),
    updated_at: zod.iso.datetime({}).describe("Last update timestamp"),
  })
  .describe("User response schema (without sensitive data).");

/**
 * Verify if token is valid.
 * @summary Verify Token
 */
export const verifyTokenApiV1AuthVerifyTokenGetQueryParams = zod.object({
  jwt_secret_key: zod.any().optional(),
  jwt_algorithm: zod.any().optional(),
  access_token_expire_minutes: zod.any().optional(),
  refresh_token_expire_days: zod.any().optional(),
  password_reset_token_expire_hours: zod.any().optional(),
  email_verification_token_expire_hours: zod.any().optional(),
  session_factory: zod.any().optional(),
});

export const verifyTokenApiV1AuthVerifyTokenGetResponse = zod.record(
  zod.string(),
  zod.any()
);

/**
 * Test endpoint that requires API key authentication.
 * @summary Test Api Key
 */
export const testApiKeyApiV1AuthTestApiKeyGetQueryParams = zod.object({
  session_factory: zod.any().optional(),
});

export const testApiKeyApiV1AuthTestApiKeyGetHeader = zod.object({
  "X-API-Key": zod.union([zod.string(), zod.null()]).optional(),
});

export const testApiKeyApiV1AuthTestApiKeyGetResponse = zod.record(
  zod.string(),
  zod.any()
);

/**
 * List all resume versions for a specific job
 * @summary List Resume Versions
 */
export const listResumeVersionsApiV1UsersUserIdJobsJobIdResumesGetParams =
  zod.object({
    user_id: zod.string(),
    job_id: zod.string(),
  });

export const listResumeVersionsApiV1UsersUserIdJobsJobIdResumesGetResponseItem =
  zod.object({
    version: zod.string(),
    created_at: zod.iso.datetime({}),
    updated_at: zod.iso.datetime({}),
    description: zod.string(),
  });
export const listResumeVersionsApiV1UsersUserIdJobsJobIdResumesGetResponse =
  zod.array(listResumeVersionsApiV1UsersUserIdJobsJobIdResumesGetResponseItem);

/**
 * Create a new resume version
 * @summary Create Resume Version
 */
export const createResumeVersionApiV1UsersUserIdJobsJobIdResumesPostParams =
  zod.object({
    user_id: zod.string(),
    job_id: zod.string(),
  });

export const createResumeVersionApiV1UsersUserIdJobsJobIdResumesPostBodyEducationItemPointsDefault =
  [];
export const createResumeVersionApiV1UsersUserIdJobsJobIdResumesPostBodyExperienceItemKeyPointsDefault =
  [];
export const createResumeVersionApiV1UsersUserIdJobsJobIdResumesPostBodyProjectsItemKeyPointsDefault =
  [];

export const createResumeVersionApiV1UsersUserIdJobsJobIdResumesPostBody =
  zod.object({
    id: zod.string(),
    user_id: zod.string(),
    job_id: zod.string(),
    version: zod.string(),
    full_name: zod.string(),
    email: zod.string(),
    phone: zod.union([zod.string(), zod.null()]).optional(),
    location: zod.union([zod.string(), zod.null()]).optional(),
    summary: zod.union([zod.string(), zod.null()]).optional(),
    education: zod.array(
      zod.object({
        degree: zod.string(),
        school_name: zod.string(),
        start_date: zod.string(),
        end_date: zod.string(),
        city: zod.union([zod.string(), zod.null()]).optional(),
        country: zod.union([zod.string(), zod.null()]).optional(),
        points: zod
          .array(zod.string())
          .default(
            createResumeVersionApiV1UsersUserIdJobsJobIdResumesPostBodyEducationItemPointsDefault
          ),
      })
    ),
    experience: zod.array(
      zod.object({
        job_title: zod.string(),
        company_name: zod.string(),
        start_date: zod.string(),
        end_date: zod.union([zod.string(), zod.null()]).optional(),
        location: zod.union([zod.string(), zod.null()]).optional(),
        description: zod.union([zod.string(), zod.null()]).optional(),
        key_points: zod
          .array(zod.string())
          .default(
            createResumeVersionApiV1UsersUserIdJobsJobIdResumesPostBodyExperienceItemKeyPointsDefault
          ),
      })
    ),
    projects: zod.array(
      zod.object({
        project_name: zod.string(),
        role: zod.string(),
        start_date: zod.string(),
        end_date: zod.union([zod.string(), zod.null()]).optional(),
        location: zod.union([zod.string(), zod.null()]).optional(),
        description: zod.union([zod.string(), zod.null()]).optional(),
        key_points: zod
          .array(zod.string())
          .default(
            createResumeVersionApiV1UsersUserIdJobsJobIdResumesPostBodyProjectsItemKeyPointsDefault
          ),
      })
    ),
    skills: zod.array(zod.string()),
    created_at: zod.iso.datetime({}),
    updated_at: zod.iso.datetime({}),
  });

export const createResumeVersionApiV1UsersUserIdJobsJobIdResumesPostResponseEducationItemPointsDefault =
  [];
export const createResumeVersionApiV1UsersUserIdJobsJobIdResumesPostResponseExperienceItemKeyPointsDefault =
  [];
export const createResumeVersionApiV1UsersUserIdJobsJobIdResumesPostResponseProjectsItemKeyPointsDefault =
  [];

export const createResumeVersionApiV1UsersUserIdJobsJobIdResumesPostResponse =
  zod.object({
    id: zod.string(),
    user_id: zod.string(),
    job_id: zod.string(),
    version: zod.string(),
    full_name: zod.string(),
    email: zod.string(),
    phone: zod.union([zod.string(), zod.null()]).optional(),
    location: zod.union([zod.string(), zod.null()]).optional(),
    summary: zod.union([zod.string(), zod.null()]).optional(),
    education: zod.array(
      zod.object({
        degree: zod.string(),
        school_name: zod.string(),
        start_date: zod.string(),
        end_date: zod.string(),
        city: zod.union([zod.string(), zod.null()]).optional(),
        country: zod.union([zod.string(), zod.null()]).optional(),
        points: zod
          .array(zod.string())
          .default(
            createResumeVersionApiV1UsersUserIdJobsJobIdResumesPostResponseEducationItemPointsDefault
          ),
      })
    ),
    experience: zod.array(
      zod.object({
        job_title: zod.string(),
        company_name: zod.string(),
        start_date: zod.string(),
        end_date: zod.union([zod.string(), zod.null()]).optional(),
        location: zod.union([zod.string(), zod.null()]).optional(),
        description: zod.union([zod.string(), zod.null()]).optional(),
        key_points: zod
          .array(zod.string())
          .default(
            createResumeVersionApiV1UsersUserIdJobsJobIdResumesPostResponseExperienceItemKeyPointsDefault
          ),
      })
    ),
    projects: zod.array(
      zod.object({
        project_name: zod.string(),
        role: zod.string(),
        start_date: zod.string(),
        end_date: zod.union([zod.string(), zod.null()]).optional(),
        location: zod.union([zod.string(), zod.null()]).optional(),
        description: zod.union([zod.string(), zod.null()]).optional(),
        key_points: zod
          .array(zod.string())
          .default(
            createResumeVersionApiV1UsersUserIdJobsJobIdResumesPostResponseProjectsItemKeyPointsDefault
          ),
      })
    ),
    skills: zod.array(zod.string()),
    created_at: zod.iso.datetime({}),
    updated_at: zod.iso.datetime({}),
  });

/**
 * Get a specific resume version
 * @summary Get Resume Version
 */
export const getResumeVersionApiV1UsersUserIdJobsJobIdResumesVersionGetParams =
  zod.object({
    user_id: zod.string(),
    job_id: zod.string(),
    version: zod.string(),
  });

export const getResumeVersionApiV1UsersUserIdJobsJobIdResumesVersionGetResponseEducationItemPointsDefault =
  [];
export const getResumeVersionApiV1UsersUserIdJobsJobIdResumesVersionGetResponseExperienceItemKeyPointsDefault =
  [];
export const getResumeVersionApiV1UsersUserIdJobsJobIdResumesVersionGetResponseProjectsItemKeyPointsDefault =
  [];

export const getResumeVersionApiV1UsersUserIdJobsJobIdResumesVersionGetResponse =
  zod.object({
    id: zod.string(),
    user_id: zod.string(),
    job_id: zod.string(),
    version: zod.string(),
    full_name: zod.string(),
    email: zod.string(),
    phone: zod.union([zod.string(), zod.null()]).optional(),
    location: zod.union([zod.string(), zod.null()]).optional(),
    summary: zod.union([zod.string(), zod.null()]).optional(),
    education: zod.array(
      zod.object({
        degree: zod.string(),
        school_name: zod.string(),
        start_date: zod.string(),
        end_date: zod.string(),
        city: zod.union([zod.string(), zod.null()]).optional(),
        country: zod.union([zod.string(), zod.null()]).optional(),
        points: zod
          .array(zod.string())
          .default(
            getResumeVersionApiV1UsersUserIdJobsJobIdResumesVersionGetResponseEducationItemPointsDefault
          ),
      })
    ),
    experience: zod.array(
      zod.object({
        job_title: zod.string(),
        company_name: zod.string(),
        start_date: zod.string(),
        end_date: zod.union([zod.string(), zod.null()]).optional(),
        location: zod.union([zod.string(), zod.null()]).optional(),
        description: zod.union([zod.string(), zod.null()]).optional(),
        key_points: zod
          .array(zod.string())
          .default(
            getResumeVersionApiV1UsersUserIdJobsJobIdResumesVersionGetResponseExperienceItemKeyPointsDefault
          ),
      })
    ),
    projects: zod.array(
      zod.object({
        project_name: zod.string(),
        role: zod.string(),
        start_date: zod.string(),
        end_date: zod.union([zod.string(), zod.null()]).optional(),
        location: zod.union([zod.string(), zod.null()]).optional(),
        description: zod.union([zod.string(), zod.null()]).optional(),
        key_points: zod
          .array(zod.string())
          .default(
            getResumeVersionApiV1UsersUserIdJobsJobIdResumesVersionGetResponseProjectsItemKeyPointsDefault
          ),
      })
    ),
    skills: zod.array(zod.string()),
    created_at: zod.iso.datetime({}),
    updated_at: zod.iso.datetime({}),
  });

/**
 * Get the latest resume version (backward compatibility)
 * @summary Get Latest Resume
 */
export const getLatestResumeApiV1UsersUserIdJobsJobIdResumeGetParams =
  zod.object({
    user_id: zod.string(),
    job_id: zod.string(),
  });

export const getLatestResumeApiV1UsersUserIdJobsJobIdResumeGetResponseEducationItemPointsDefault =
  [];
export const getLatestResumeApiV1UsersUserIdJobsJobIdResumeGetResponseExperienceItemKeyPointsDefault =
  [];
export const getLatestResumeApiV1UsersUserIdJobsJobIdResumeGetResponseProjectsItemKeyPointsDefault =
  [];

export const getLatestResumeApiV1UsersUserIdJobsJobIdResumeGetResponse =
  zod.object({
    id: zod.string(),
    user_id: zod.string(),
    job_id: zod.string(),
    version: zod.string(),
    full_name: zod.string(),
    email: zod.string(),
    phone: zod.union([zod.string(), zod.null()]).optional(),
    location: zod.union([zod.string(), zod.null()]).optional(),
    summary: zod.union([zod.string(), zod.null()]).optional(),
    education: zod.array(
      zod.object({
        degree: zod.string(),
        school_name: zod.string(),
        start_date: zod.string(),
        end_date: zod.string(),
        city: zod.union([zod.string(), zod.null()]).optional(),
        country: zod.union([zod.string(), zod.null()]).optional(),
        points: zod
          .array(zod.string())
          .default(
            getLatestResumeApiV1UsersUserIdJobsJobIdResumeGetResponseEducationItemPointsDefault
          ),
      })
    ),
    experience: zod.array(
      zod.object({
        job_title: zod.string(),
        company_name: zod.string(),
        start_date: zod.string(),
        end_date: zod.union([zod.string(), zod.null()]).optional(),
        location: zod.union([zod.string(), zod.null()]).optional(),
        description: zod.union([zod.string(), zod.null()]).optional(),
        key_points: zod
          .array(zod.string())
          .default(
            getLatestResumeApiV1UsersUserIdJobsJobIdResumeGetResponseExperienceItemKeyPointsDefault
          ),
      })
    ),
    projects: zod.array(
      zod.object({
        project_name: zod.string(),
        role: zod.string(),
        start_date: zod.string(),
        end_date: zod.union([zod.string(), zod.null()]).optional(),
        location: zod.union([zod.string(), zod.null()]).optional(),
        description: zod.union([zod.string(), zod.null()]).optional(),
        key_points: zod
          .array(zod.string())
          .default(
            getLatestResumeApiV1UsersUserIdJobsJobIdResumeGetResponseProjectsItemKeyPointsDefault
          ),
      })
    ),
    skills: zod.array(zod.string()),
    created_at: zod.iso.datetime({}),
    updated_at: zod.iso.datetime({}),
  });

/**
 * @summary Create Job
 */
export const createJobApiV1JobsCreatePostQueryParams = zod.object({
  jwt_secret_key: zod.any().optional(),
  jwt_algorithm: zod.any().optional(),
  access_token_expire_minutes: zod.any().optional(),
  refresh_token_expire_days: zod.any().optional(),
  password_reset_token_expire_hours: zod.any().optional(),
  email_verification_token_expire_hours: zod.any().optional(),
  session_factory: zod.any().optional(),
});

export const createJobApiV1JobsCreatePostBody = zod.object({
  job_description: zod.string(),
  job_url: zod.union([zod.string(), zod.null()]).optional(),
});

export const createJobApiV1JobsCreatePostResponse = zod.object({
  job_id: zod.uuid(),
  sse_url: zod.string(),
});

/**
 * @summary Select Relevant Info
 */
export const selectRelevantInfoApiV1JobsJobIdSelectRelevantInfoPostParams =
  zod.object({
    job_id: zod.uuid(),
  });

export const selectRelevantInfoApiV1JobsJobIdSelectRelevantInfoPostQueryParams =
  zod.object({
    jwt_secret_key: zod.any().optional(),
    jwt_algorithm: zod.any().optional(),
    access_token_expire_minutes: zod.any().optional(),
    refresh_token_expire_days: zod.any().optional(),
    password_reset_token_expire_hours: zod.any().optional(),
    email_verification_token_expire_hours: zod.any().optional(),
    session_factory: zod.any().optional(),
  });

export const selectRelevantInfoApiV1JobsJobIdSelectRelevantInfoPostResponse =
  zod.any();

/**
 * @summary Refine Resume
 */
export const refineResumeApiV1JobsJobIdRefinePostParams = zod.object({
  job_id: zod.uuid(),
});

export const refineResumeApiV1JobsJobIdRefinePostQueryParams = zod.object({
  jwt_secret_key: zod.any().optional(),
  jwt_algorithm: zod.any().optional(),
  access_token_expire_minutes: zod.any().optional(),
  refresh_token_expire_days: zod.any().optional(),
  password_reset_token_expire_hours: zod.any().optional(),
  email_verification_token_expire_hours: zod.any().optional(),
  session_factory: zod.any().optional(),
});

export const refineResumeApiV1JobsJobIdRefinePostResponse = zod.any();

/**
 * @summary Stream Status
 */
export const streamStatusApiV1JobsJobIdStatusStreamGetParams = zod.object({
  job_id: zod.uuid(),
});

export const streamStatusApiV1JobsJobIdStatusStreamGetQueryParams = zod.object({
  jwt_secret_key: zod.any().optional(),
  jwt_algorithm: zod.any().optional(),
  access_token_expire_minutes: zod.any().optional(),
  refresh_token_expire_days: zod.any().optional(),
  password_reset_token_expire_hours: zod.any().optional(),
  email_verification_token_expire_hours: zod.any().optional(),
  session_factory: zod.any().optional(),
});

export const streamStatusApiV1JobsJobIdStatusStreamGetResponse = zod.any();

/**
 * @summary Get Status
 */
export const getStatusApiV1JobsJobIdStatusGetParams = zod.object({
  job_id: zod.uuid(),
});

export const getStatusApiV1JobsJobIdStatusGetQueryParams = zod.object({
  jwt_secret_key: zod.any().optional(),
  jwt_algorithm: zod.any().optional(),
  access_token_expire_minutes: zod.any().optional(),
  refresh_token_expire_days: zod.any().optional(),
  password_reset_token_expire_hours: zod.any().optional(),
  email_verification_token_expire_hours: zod.any().optional(),
  session_factory: zod.any().optional(),
});

export const getStatusApiV1JobsJobIdStatusGetResponse = zod.object({
  job_parsed_at: zod.union([zod.iso.datetime({}), zod.null()]).optional(),
});

/**
 * @summary Root
 */
export const rootGetResponse = zod.any();

/**
 * @summary Health Check
 */
export const healthCheckHealthGetResponse = zod.any();
