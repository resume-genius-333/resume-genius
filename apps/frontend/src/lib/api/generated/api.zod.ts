/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Resume Genius API
 * OpenAPI spec version: 1.0.0
 */
import { z as zod } from "zod";

/**
 * Register a new user.
 * @summary Register
 */
export const registerApiV1AuthRegisterPostBodyLastNameMaxOne = 100;

export const registerApiV1AuthRegisterPostBodyPasswordMin = 8;
export const registerApiV1AuthRegisterPostBodyFirstNameMax = 100;

export const registerApiV1AuthRegisterPostBody = zod
  .object({
    email: zod.email().describe("User email address"),
    password: zod
      .string()
      .min(registerApiV1AuthRegisterPostBodyPasswordMin)
      .describe("User password"),
    first_name: zod
      .string()
      .min(1)
      .max(registerApiV1AuthRegisterPostBodyFirstNameMax)
      .describe("First name"),
    last_name: zod
      .union([
        zod.string().max(registerApiV1AuthRegisterPostBodyLastNameMaxOne),
        zod.null(),
      ])
      .optional()
      .describe("Last name"),
  })
  .describe("User registration request schema.");

/**
 * Login user and create session.
 * @summary Login
 */
export const loginApiV1AuthLoginPostBodyRememberMeDefault = false;

export const loginApiV1AuthLoginPostBody = zod
  .object({
    email: zod.email().describe("User email address"),
    password: zod.string().describe("User password"),
    remember_me: zod.boolean().optional().describe("Extended session duration"),
  })
  .describe("User login request schema.");

export const loginApiV1AuthLoginPostResponseTokenTypeDefault = "bearer";

export const loginApiV1AuthLoginPostResponse = zod
  .object({
    access_token: zod.string().describe("JWT access token"),
    refresh_token: zod.string().describe("JWT refresh token"),
    token_type: zod
      .string()
      .default(loginApiV1AuthLoginPostResponseTokenTypeDefault)
      .describe("Token type"),
    expires_in: zod.number().describe("Access token expiration in seconds"),
  })
  .describe("User login response schema.");

/**
 * OAuth2 compatible token endpoint for Swagger UI authentication.

This endpoint accepts username (email) and password via form data
and returns an access token in OAuth2 format.
 * @summary Token
 */
export const tokenApiV1AuthTokenPostResponse = zod.any();

/**
 * Refresh access token using refresh token.
 * @summary Refresh Token
 */
export const refreshTokenApiV1AuthRefreshPostBody = zod
  .object({
    refresh_token: zod.string().describe("JWT refresh token"),
  })
  .describe("Refresh token request schema.");

export const refreshTokenApiV1AuthRefreshPostResponseTokenTypeDefault =
  "bearer";

export const refreshTokenApiV1AuthRefreshPostResponse = zod
  .object({
    access_token: zod.string().describe("New JWT access token"),
    token_type: zod
      .string()
      .default(refreshTokenApiV1AuthRefreshPostResponseTokenTypeDefault)
      .describe("Token type"),
    expires_in: zod.number().describe("Access token expiration in seconds"),
  })
  .describe("Refresh token response schema.");

/**
 * Get current user information.
 * @summary Get Me
 */
export const getMeApiV1AuthMeGetResponse = zod.object({
  id: zod.uuid(),
  first_name: zod.string(),
  full_name: zod.union([zod.string(), zod.null()]).optional(),
  last_name: zod.union([zod.string(), zod.null()]).optional(),
  name_prefix: zod.union([zod.string(), zod.null()]).optional(),
  name_suffix: zod.union([zod.string(), zod.null()]).optional(),
  email: zod.string(),
  email_verified: zod.boolean(),
  email_verified_at: zod.union([zod.iso.datetime({}), zod.null()]).optional(),
  phone: zod.union([zod.string(), zod.null()]).optional(),
  location: zod.union([zod.string(), zod.null()]).optional(),
  avatar_url: zod.union([zod.string(), zod.null()]).optional(),
  linkedin_url: zod.union([zod.string(), zod.null()]).optional(),
  github_url: zod.union([zod.string(), zod.null()]).optional(),
  portfolio_url: zod.union([zod.string(), zod.null()]).optional(),
  is_active: zod.boolean(),
  last_login_at: zod.union([zod.iso.datetime({}), zod.null()]).optional(),
  created_at: zod.iso.datetime({}),
  updated_at: zod.iso.datetime({}),
});

/**
 * Verify if token is valid.
 * @summary Verify Token
 */
export const verifyTokenApiV1AuthVerifyTokenGetResponse = zod.record(
  zod.string(),
  zod.any()
);

/**
 * Test endpoint that requires API key authentication.
 * @summary Test Api Key
 */
export const testApiKeyApiV1AuthTestApiKeyGetHeader = zod.object({
  "X-API-Key": zod.union([zod.string(), zod.null()]).optional(),
});

export const testApiKeyApiV1AuthTestApiKeyGetResponse = zod.record(
  zod.string(),
  zod.any()
);

/**
 * Create a new job and process it in the background.
 * @summary Create Job
 */
export const createJobApiV1JobsCreatePostBody = zod
  .object({
    job_description: zod.string(),
    job_url: zod.union([zod.string(), zod.null()]).optional(),
  })
  .describe("Request model for creating a job.");

export const createJobApiV1JobsCreatePostResponse = zod
  .object({
    job_id: zod.uuid(),
    sse_url: zod.string(),
  })
  .describe("Response model for job creation.");

/**
 * List all jobs for the current user with pagination.
 * @summary List Jobs
 */
export const listJobsApiV1JobsGetQueryPageSizeDefault = 20;
export const listJobsApiV1JobsGetQueryPageDefault = 0;

export const listJobsApiV1JobsGetQueryParams = zod.object({
  page_size: zod.number().default(listJobsApiV1JobsGetQueryPageSizeDefault),
  page: zod.number().optional(),
});

export const listJobsApiV1JobsGetResponse = zod.object({
  items: zod.array(
    zod.object({
      id: zod.uuid(),
      user_id: zod.uuid(),
      company_name: zod.string(),
      position_title: zod.string(),
      job_description: zod.string(),
      job_url: zod.union([zod.string(), zod.null()]).optional(),
    })
  ),
  total: zod.number(),
  page: zod.number(),
  page_size: zod.number(),
  total_pages: zod.number(),
});

/**
 * Get a specific job by ID.
 * @summary Get Job
 */
export const getJobApiV1JobsJobIdGetParams = zod.object({
  job_id: zod.uuid(),
});

export const getJobApiV1JobsJobIdGetResponse = zod.object({
  id: zod.uuid(),
  user_id: zod.uuid(),
  company_name: zod.string(),
  position_title: zod.string(),
  job_description: zod.string(),
  job_url: zod.union([zod.string(), zod.null()]).optional(),
});

/**
 * Select relevant information from user's resume for the job.
 * @summary Get Job Selected Educations
 */
export const getJobSelectedEducationsApiV1JobsJobIdSelectedEducationsGetParams =
  zod.object({
    job_id: zod.uuid(),
  });

export const getJobSelectedEducationsApiV1JobsJobIdSelectedEducationsGetResponse =
  zod.object({
    selected_items: zod
      .array(
        zod.object({
          id: zod
            .uuid()
            .describe(
              "UUID of a profile entity to INCLUDE (education, work, project, skill, certification, award, publication, volunteer, coursework, etc.). Must exist in the source dataset."
            ),
          justification: zod
            .string()
            .describe(
              "2‚Äì3 sentences explaining why this entity improves fit for the TARGET ROLE. Tie to 1‚Äì3 job requirements/keywords and include concrete evidence (scope, metrics, tech, outcomes). Guidance by type: ‚Ä¢ Education: degree/level match, recency, key coursework/capstone. ‚Ä¢ Work/Project: responsibilities, impact/metrics, stack/tools. ‚Ä¢ Skill/Certification: proficiency/level, recency, where it was applied."
            ),
        })
      )
      .describe(
        "Entities to INCLUDE in the final resume, ordered by relevance (most relevant first) to the target role. IDs must be unique and must NOT appear in not_selected_items."
      ),
    not_selected_items: zod
      .array(
        zod.object({
          id: zod
            .uuid()
            .describe(
              "UUID of a profile entity to OMIT (education, work, project, skill, certification, etc.). Must exist in the source dataset."
            ),
          justification: zod
            .string()
            .describe(
              "One clear reason for omission such as: irrelevant to core requirements, outdated, low impact, duplicative/overlaps with a stronger included entity, or space constraints. Reference the mismatched requirement or the overlapping included entity when applicable."
            ),
        })
      )
      .describe(
        "Entities to OMIT from the final resume, each with a concise reason. IDs must be unique and must NOT overlap with selected_items."
      ),
  });

/**
 * Select relevant information from user's resume for the job.
 * @summary Get Job Selected Work Experiences
 */
export const getJobSelectedWorkExperiencesApiV1JobsJobIdSelectedWorkExperiencesGetParams =
  zod.object({
    job_id: zod.uuid(),
  });

export const getJobSelectedWorkExperiencesApiV1JobsJobIdSelectedWorkExperiencesGetResponse =
  zod.any();

/**
 * Select relevant information from user's resume for the job.
 * @summary Get Job Selected Projects
 */
export const getJobSelectedProjectsApiV1JobsJobIdSelectedProjectsGetParams =
  zod.object({
    job_id: zod.uuid(),
  });

export const getJobSelectedProjectsApiV1JobsJobIdSelectedProjectsGetResponse =
  zod.any();

/**
 * Select relevant information from user's resume for the job.
 * @summary Get Job Selected Skills
 */
export const getJobSelectedSkillsApiV1JobsJobIdSelectedSkillsGetParams =
  zod.object({
    job_id: zod.uuid(),
  });

export const getJobSelectedSkillsApiV1JobsJobIdSelectedSkillsGetResponse =
  zod.any();

/**
 * Select relevant information from user's resume for the job.
 * @summary Confirm Job Experience Selection
 */
export const confirmJobExperienceSelectionApiV1JobsJobIdConfirmExperienceSelectionPostParams =
  zod.object({
    job_id: zod.uuid(),
  });

export const confirmJobExperienceSelectionApiV1JobsJobIdConfirmExperienceSelectionPostResponse =
  zod.any();

/**
 * Refine user's resume for the specific job.
 * @summary Refine Job Resume
 */
export const refineJobResumeApiV1JobsJobIdRefinePostParams = zod.object({
  job_id: zod.uuid(),
});

export const refineJobResumeApiV1JobsJobIdRefinePostResponse = zod
  .object({
    status: zod.string(),
    message: zod.string(),
  })
  .describe("Response model for resume refinement.");

/**
 * Stream job processing status via Server-Sent Events.
 * @summary Stream Job Status
 */
export const streamJobStatusApiV1JobsJobIdStatusStreamGetParams = zod.object({
  job_id: zod.uuid(),
});

export const streamJobStatusApiV1JobsJobIdStatusStreamGetResponse = zod.any();

/**
 * Get current processing status for a job.
 * @summary Get Status
 */
export const getStatusApiV1JobsJobIdStatusGetParams = zod.object({
  job_id: zod.uuid(),
});

export const getStatusApiV1JobsJobIdStatusGetResponse = zod
  .object({
    job_parsed_at: zod.union([zod.iso.datetime({}), zod.null()]).optional(),
    educations_selected_at: zod
      .union([zod.iso.datetime({}), zod.null()])
      .optional(),
    work_experiences_selected_at: zod
      .union([zod.iso.datetime({}), zod.null()])
      .optional(),
    projects_selected_at: zod
      .union([zod.iso.datetime({}), zod.null()])
      .optional(),
    skills_selected_at: zod
      .union([zod.iso.datetime({}), zod.null()])
      .optional(),
  })
  .describe("Processing status model.");

/**
 * List all resume versions for the current user with pagination.
 * @summary List Resume Versions
 */
export const listResumeVersionsApiV1ResumesGetQueryLimitDefault = 20;
export const listResumeVersionsApiV1ResumesGetQueryLimitMax = 100;
export const listResumeVersionsApiV1ResumesGetQueryOffsetDefault = 0;
export const listResumeVersionsApiV1ResumesGetQueryOffsetMin = 0;

export const listResumeVersionsApiV1ResumesGetQueryParams = zod.object({
  job_id: zod.union([zod.uuid(), zod.null()]).optional(),
  limit: zod
    .number()
    .min(1)
    .max(listResumeVersionsApiV1ResumesGetQueryLimitMax)
    .default(listResumeVersionsApiV1ResumesGetQueryLimitDefault),
  offset: zod
    .number()
    .min(listResumeVersionsApiV1ResumesGetQueryOffsetMin)
    .optional(),
});

export const listResumeVersionsApiV1ResumesGetResponse = zod
  .object({
    items: zod.array(zod.any()),
    total: zod.number(),
    limit: zod.number(),
    offset: zod.number(),
    has_more: zod.boolean(),
  })
  .describe("Base model for paginated responses.");

/**
 * Create a new resume version.
 * @summary Create Resume Version
 */
export const createResumeVersionApiV1ResumesPostBody = zod
  .object({
    job_id: zod.uuid(),
    parent_version: zod.union([zod.uuid(), zod.null()]).optional(),
    metadata_id: zod.union([zod.uuid(), zod.null()]).optional(),
    pinned_education_ids: zod
      .union([zod.array(zod.uuid()), zod.null()])
      .optional(),
    pinned_experience_ids: zod
      .union([zod.array(zod.uuid()), zod.null()])
      .optional(),
    pinned_project_ids: zod
      .union([zod.array(zod.uuid()), zod.null()])
      .optional(),
    pinned_skill_ids: zod.union([zod.array(zod.uuid()), zod.null()]).optional(),
  })
  .describe("Request model for creating a new resume version.");

export const createResumeVersionApiV1ResumesPostResponse = zod.object({
  version: zod.uuid(),
  user_id: zod.uuid(),
  job_id: zod.uuid(),
  parent_version: zod.union([zod.uuid(), zod.null()]).optional(),
  metadata_id: zod.uuid(),
  pinned_education_ids: zod.array(zod.uuid()),
  pinned_experience_ids: zod.array(zod.uuid()),
  pinned_project_ids: zod.array(zod.uuid()),
  pinned_skill_ids: zod.array(zod.uuid()),
});

/**
 * Get the latest resume version for the current user.
 * @summary Get Latest Resume Version
 */
export const getLatestResumeVersionApiV1ResumesLatestGetQueryParams =
  zod.object({
    job_id: zod.union([zod.uuid(), zod.null()]).optional(),
  });

export const getLatestResumeVersionApiV1ResumesLatestGetResponse = zod.object({
  version: zod.uuid(),
  user_id: zod.uuid(),
  job_id: zod.uuid(),
  parent_version: zod.union([zod.uuid(), zod.null()]).optional(),
  metadata_id: zod.uuid(),
  pinned_education_ids: zod.array(zod.uuid()),
  pinned_experience_ids: zod.array(zod.uuid()),
  pinned_project_ids: zod.array(zod.uuid()),
  pinned_skill_ids: zod.array(zod.uuid()),
});

/**
 * Get full resume with all sections for a specific version.
 * @summary Get Full Resume
 */
export const getFullResumeApiV1ResumesVersionIdGetParams = zod.object({
  version_id: zod.uuid(),
});

export const getFullResumeApiV1ResumesVersionIdGetResponse = zod
  .object({
    version: zod.object({
      version: zod.uuid(),
      user_id: zod.uuid(),
      job_id: zod.uuid(),
      parent_version: zod.union([zod.uuid(), zod.null()]).optional(),
      metadata_id: zod.uuid(),
      pinned_education_ids: zod.array(zod.uuid()),
      pinned_experience_ids: zod.array(zod.uuid()),
      pinned_project_ids: zod.array(zod.uuid()),
      pinned_skill_ids: zod.array(zod.uuid()),
    }),
    metadata: zod.union([
      zod.object({
        id: zod.uuid(),
        user_id: zod.uuid(),
        job_id: zod.uuid(),
        parent_id: zod.union([zod.uuid(), zod.null()]).optional(),
        user_name: zod.string(),
        email: zod.union([zod.string(), zod.null()]).optional(),
        phone: zod.union([zod.string(), zod.null()]).optional(),
        location: zod.union([zod.string(), zod.null()]).optional(),
        linkedin_url: zod.union([zod.string(), zod.null()]).optional(),
        github_url: zod.union([zod.string(), zod.null()]).optional(),
        portfolio_website: zod.union([zod.string(), zod.null()]).optional(),
        custom_styles: zod
          .union([zod.record(zod.string(), zod.any()), zod.null()])
          .optional(),
      }),
      zod.null(),
    ]),
    educations: zod.array(
      zod.object({
        id: zod.uuid(),
        user_id: zod.uuid(),
        job_id: zod.uuid(),
        parent_id: zod.union([zod.uuid(), zod.null()]).optional(),
        institution_name: zod.string(),
        degree: zod.string(),
        field_of_study: zod.string(),
        focus_area: zod.union([zod.string(), zod.null()]).optional(),
        start_date: zod.union([zod.string(), zod.null()]).optional(),
        end_date: zod.union([zod.string(), zod.null()]).optional(),
        gpa: zod.union([zod.number(), zod.null()]).optional(),
        max_gpa: zod.union([zod.number(), zod.null()]).optional(),
        city: zod.union([zod.string(), zod.null()]).optional(),
        country: zod.union([zod.string(), zod.null()]).optional(),
      })
    ),
    work_experiences: zod.array(
      zod.object({
        id: zod.uuid(),
        user_id: zod.uuid(),
        job_id: zod.uuid(),
        parent_id: zod.union([zod.uuid(), zod.null()]).optional(),
        job_title: zod.string(),
        company_name: zod.string(),
        employment_type: zod.union([zod.string(), zod.null()]).optional(),
        start_date: zod.union([zod.string(), zod.null()]).optional(),
        end_date: zod.union([zod.string(), zod.null()]).optional(),
        location: zod.union([zod.string(), zod.null()]).optional(),
      })
    ),
    projects: zod.array(
      zod.object({
        id: zod.uuid(),
        user_id: zod.uuid(),
        job_id: zod.uuid(),
        parent_id: zod.union([zod.uuid(), zod.null()]).optional(),
        project_name: zod.string(),
        role: zod.union([zod.string(), zod.null()]).optional(),
        start_date: zod.union([zod.string(), zod.null()]).optional(),
        end_date: zod.union([zod.string(), zod.null()]).optional(),
        location: zod.union([zod.string(), zod.null()]).optional(),
        description: zod.union([zod.string(), zod.null()]).optional(),
      })
    ),
    skills: zod.array(
      zod.object({
        id: zod.uuid(),
        user_id: zod.uuid(),
        job_id: zod.uuid(),
        parent_id: zod.union([zod.uuid(), zod.null()]).optional(),
        skill_name: zod.string(),
        skill_category: zod.union([zod.string(), zod.null()]).optional(),
        proficiency_level: zod.union([zod.string(), zod.null()]).optional(),
      })
    ),
  })
  .describe("Response model for full resume with all sections.");

/**
 * Update which sections are pinned to a resume version.
 * @summary Update Resume Version
 */
export const updateResumeVersionApiV1ResumesVersionIdPutParams = zod.object({
  version_id: zod.uuid(),
});

export const updateResumeVersionApiV1ResumesVersionIdPutBody = zod
  .object({
    metadata_id: zod.union([zod.uuid(), zod.null()]).optional(),
    pinned_education_ids: zod
      .union([zod.array(zod.uuid()), zod.null()])
      .optional(),
    pinned_experience_ids: zod
      .union([zod.array(zod.uuid()), zod.null()])
      .optional(),
    pinned_project_ids: zod
      .union([zod.array(zod.uuid()), zod.null()])
      .optional(),
    pinned_skill_ids: zod.union([zod.array(zod.uuid()), zod.null()]).optional(),
  })
  .describe("Request model for updating resume version pins.");

export const updateResumeVersionApiV1ResumesVersionIdPutResponse = zod.object({
  version: zod.uuid(),
  user_id: zod.uuid(),
  job_id: zod.uuid(),
  parent_version: zod.union([zod.uuid(), zod.null()]).optional(),
  metadata_id: zod.uuid(),
  pinned_education_ids: zod.array(zod.uuid()),
  pinned_experience_ids: zod.array(zod.uuid()),
  pinned_project_ids: zod.array(zod.uuid()),
  pinned_skill_ids: zod.array(zod.uuid()),
});

/**
 * Enhance entire resume version using AI.
 * @summary Enhance Resume Version
 */
export const enhanceResumeVersionApiV1ResumesVersionIdEnhancePostParams =
  zod.object({
    version_id: zod.uuid(),
  });

export const enhanceResumeVersionApiV1ResumesVersionIdEnhancePostBodyAgentModeDefault = false;
export const enhanceResumeVersionApiV1ResumesVersionIdEnhancePostBodyToneDefault =
  "professional";

export const enhanceResumeVersionApiV1ResumesVersionIdEnhancePostBody = zod
  .object({
    prompt: zod.string(),
    agent_mode: zod.boolean().optional(),
    tone: zod
      .union([zod.string(), zod.null()])
      .default(
        enhanceResumeVersionApiV1ResumesVersionIdEnhancePostBodyToneDefault
      ),
    context: zod
      .union([zod.record(zod.string(), zod.any()), zod.null()])
      .optional(),
  })
  .describe("Request model for AI enhancement.");

export const enhanceResumeVersionApiV1ResumesVersionIdEnhancePostResponse =
  zod.object({
    version: zod.uuid(),
    user_id: zod.uuid(),
    job_id: zod.uuid(),
    parent_version: zod.union([zod.uuid(), zod.null()]).optional(),
    metadata_id: zod.uuid(),
    pinned_education_ids: zod.array(zod.uuid()),
    pinned_experience_ids: zod.array(zod.uuid()),
    pinned_project_ids: zod.array(zod.uuid()),
    pinned_skill_ids: zod.array(zod.uuid()),
  });

/**
 * Get specific metadata by ID.
 * @summary Get Resume Metadata
 */
export const getResumeMetadataApiV1ResumesMetadataMetadataIdGetParams =
  zod.object({
    metadata_id: zod.uuid(),
  });

export const getResumeMetadataApiV1ResumesMetadataMetadataIdGetResponse =
  zod.object({
    id: zod.uuid(),
    user_id: zod.uuid(),
    job_id: zod.uuid(),
    parent_id: zod.union([zod.uuid(), zod.null()]).optional(),
    user_name: zod.string(),
    email: zod.union([zod.string(), zod.null()]).optional(),
    phone: zod.union([zod.string(), zod.null()]).optional(),
    location: zod.union([zod.string(), zod.null()]).optional(),
    linkedin_url: zod.union([zod.string(), zod.null()]).optional(),
    github_url: zod.union([zod.string(), zod.null()]).optional(),
    portfolio_website: zod.union([zod.string(), zod.null()]).optional(),
    custom_styles: zod
      .union([zod.record(zod.string(), zod.any()), zod.null()])
      .optional(),
  });

/**
 * Update metadata manually.
 * @summary Update Resume Metadata
 */
export const updateResumeMetadataApiV1ResumesMetadataMetadataIdPutParams =
  zod.object({
    metadata_id: zod.uuid(),
  });

export const updateResumeMetadataApiV1ResumesMetadataMetadataIdPutBody = zod
  .object({
    user_name: zod.union([zod.string(), zod.null()]).optional(),
    email: zod.union([zod.string(), zod.null()]).optional(),
    phone: zod.union([zod.string(), zod.null()]).optional(),
    location: zod.union([zod.string(), zod.null()]).optional(),
    linkedin_url: zod.union([zod.string(), zod.null()]).optional(),
    github_url: zod.union([zod.string(), zod.null()]).optional(),
    portfolio_website: zod.union([zod.string(), zod.null()]).optional(),
    custom_styles: zod
      .union([zod.record(zod.string(), zod.any()), zod.null()])
      .optional(),
  })
  .describe("Request model for updating resume metadata.");

export const updateResumeMetadataApiV1ResumesMetadataMetadataIdPutResponse =
  zod.object({
    id: zod.uuid(),
    user_id: zod.uuid(),
    job_id: zod.uuid(),
    parent_id: zod.union([zod.uuid(), zod.null()]).optional(),
    user_name: zod.string(),
    email: zod.union([zod.string(), zod.null()]).optional(),
    phone: zod.union([zod.string(), zod.null()]).optional(),
    location: zod.union([zod.string(), zod.null()]).optional(),
    linkedin_url: zod.union([zod.string(), zod.null()]).optional(),
    github_url: zod.union([zod.string(), zod.null()]).optional(),
    portfolio_website: zod.union([zod.string(), zod.null()]).optional(),
    custom_styles: zod
      .union([zod.record(zod.string(), zod.any()), zod.null()])
      .optional(),
  });

/**
 * Enhance metadata using AI.
 * @summary Enhance Resume Metadata
 */
export const enhanceResumeMetadataApiV1ResumesMetadataMetadataIdEnhancePostParams =
  zod.object({
    metadata_id: zod.uuid(),
  });

export const enhanceResumeMetadataApiV1ResumesMetadataMetadataIdEnhancePostBodyAgentModeDefault = false;
export const enhanceResumeMetadataApiV1ResumesMetadataMetadataIdEnhancePostBodyToneDefault =
  "professional";

export const enhanceResumeMetadataApiV1ResumesMetadataMetadataIdEnhancePostBody =
  zod
    .object({
      prompt: zod.string(),
      agent_mode: zod.boolean().optional(),
      tone: zod
        .union([zod.string(), zod.null()])
        .default(
          enhanceResumeMetadataApiV1ResumesMetadataMetadataIdEnhancePostBodyToneDefault
        ),
      context: zod
        .union([zod.record(zod.string(), zod.any()), zod.null()])
        .optional(),
    })
    .describe("Request model for AI enhancement.");

export const enhanceResumeMetadataApiV1ResumesMetadataMetadataIdEnhancePostResponse =
  zod.object({
    id: zod.uuid(),
    user_id: zod.uuid(),
    job_id: zod.uuid(),
    parent_id: zod.union([zod.uuid(), zod.null()]).optional(),
    user_name: zod.string(),
    email: zod.union([zod.string(), zod.null()]).optional(),
    phone: zod.union([zod.string(), zod.null()]).optional(),
    location: zod.union([zod.string(), zod.null()]).optional(),
    linkedin_url: zod.union([zod.string(), zod.null()]).optional(),
    github_url: zod.union([zod.string(), zod.null()]).optional(),
    portfolio_website: zod.union([zod.string(), zod.null()]).optional(),
    custom_styles: zod
      .union([zod.record(zod.string(), zod.any()), zod.null()])
      .optional(),
  });

/**
 * Get specific education entry by ID.
 * @summary Get Resume Education
 */
export const getResumeEducationApiV1ResumesEducationsEducationIdGetParams =
  zod.object({
    education_id: zod.uuid(),
  });

export const getResumeEducationApiV1ResumesEducationsEducationIdGetResponse =
  zod.object({
    id: zod.uuid(),
    user_id: zod.uuid(),
    job_id: zod.uuid(),
    parent_id: zod.union([zod.uuid(), zod.null()]).optional(),
    institution_name: zod.string(),
    degree: zod.string(),
    field_of_study: zod.string(),
    focus_area: zod.union([zod.string(), zod.null()]).optional(),
    start_date: zod.union([zod.string(), zod.null()]).optional(),
    end_date: zod.union([zod.string(), zod.null()]).optional(),
    gpa: zod.union([zod.number(), zod.null()]).optional(),
    max_gpa: zod.union([zod.number(), zod.null()]).optional(),
    city: zod.union([zod.string(), zod.null()]).optional(),
    country: zod.union([zod.string(), zod.null()]).optional(),
  });

/**
 * Update education entry manually.
 * @summary Update Resume Education
 */
export const updateResumeEducationApiV1ResumesEducationsEducationIdPutParams =
  zod.object({
    education_id: zod.uuid(),
  });

export const updateResumeEducationApiV1ResumesEducationsEducationIdPutBody = zod
  .object({
    institution_name: zod.union([zod.string(), zod.null()]).optional(),
    degree: zod.union([zod.string(), zod.null()]).optional(),
    field_of_study: zod.union([zod.string(), zod.null()]).optional(),
    focus_area: zod.union([zod.string(), zod.null()]).optional(),
    start_date: zod.union([zod.string(), zod.null()]).optional(),
    end_date: zod.union([zod.string(), zod.null()]).optional(),
    gpa: zod.union([zod.number(), zod.null()]).optional(),
    max_gpa: zod.union([zod.number(), zod.null()]).optional(),
    city: zod.union([zod.string(), zod.null()]).optional(),
    country: zod.union([zod.string(), zod.null()]).optional(),
  })
  .describe("Request model for updating resume education.");

export const updateResumeEducationApiV1ResumesEducationsEducationIdPutResponse =
  zod.object({
    id: zod.uuid(),
    user_id: zod.uuid(),
    job_id: zod.uuid(),
    parent_id: zod.union([zod.uuid(), zod.null()]).optional(),
    institution_name: zod.string(),
    degree: zod.string(),
    field_of_study: zod.string(),
    focus_area: zod.union([zod.string(), zod.null()]).optional(),
    start_date: zod.union([zod.string(), zod.null()]).optional(),
    end_date: zod.union([zod.string(), zod.null()]).optional(),
    gpa: zod.union([zod.number(), zod.null()]).optional(),
    max_gpa: zod.union([zod.number(), zod.null()]).optional(),
    city: zod.union([zod.string(), zod.null()]).optional(),
    country: zod.union([zod.string(), zod.null()]).optional(),
  });

/**
 * Enhance education entry using AI.
 * @summary Enhance Resume Education
 */
export const enhanceResumeEducationApiV1ResumesEducationsEducationIdEnhancePostParams =
  zod.object({
    education_id: zod.uuid(),
  });

export const enhanceResumeEducationApiV1ResumesEducationsEducationIdEnhancePostBodyAgentModeDefault = false;
export const enhanceResumeEducationApiV1ResumesEducationsEducationIdEnhancePostBodyToneDefault =
  "professional";

export const enhanceResumeEducationApiV1ResumesEducationsEducationIdEnhancePostBody =
  zod
    .object({
      prompt: zod.string(),
      agent_mode: zod.boolean().optional(),
      tone: zod
        .union([zod.string(), zod.null()])
        .default(
          enhanceResumeEducationApiV1ResumesEducationsEducationIdEnhancePostBodyToneDefault
        ),
      context: zod
        .union([zod.record(zod.string(), zod.any()), zod.null()])
        .optional(),
    })
    .describe("Request model for AI enhancement.");

export const enhanceResumeEducationApiV1ResumesEducationsEducationIdEnhancePostResponse =
  zod.object({
    id: zod.uuid(),
    user_id: zod.uuid(),
    job_id: zod.uuid(),
    parent_id: zod.union([zod.uuid(), zod.null()]).optional(),
    institution_name: zod.string(),
    degree: zod.string(),
    field_of_study: zod.string(),
    focus_area: zod.union([zod.string(), zod.null()]).optional(),
    start_date: zod.union([zod.string(), zod.null()]).optional(),
    end_date: zod.union([zod.string(), zod.null()]).optional(),
    gpa: zod.union([zod.number(), zod.null()]).optional(),
    max_gpa: zod.union([zod.number(), zod.null()]).optional(),
    city: zod.union([zod.string(), zod.null()]).optional(),
    country: zod.union([zod.string(), zod.null()]).optional(),
  });

/**
 * Get specific work experience by ID.
 * @summary Get Resume Work Experience
 */
export const getResumeWorkExperienceApiV1ResumesWorkExperiencesWorkIdGetParams =
  zod.object({
    work_id: zod.uuid(),
  });

export const getResumeWorkExperienceApiV1ResumesWorkExperiencesWorkIdGetResponse =
  zod.object({
    id: zod.uuid(),
    user_id: zod.uuid(),
    job_id: zod.uuid(),
    parent_id: zod.union([zod.uuid(), zod.null()]).optional(),
    job_title: zod.string(),
    company_name: zod.string(),
    employment_type: zod.union([zod.string(), zod.null()]).optional(),
    start_date: zod.union([zod.string(), zod.null()]).optional(),
    end_date: zod.union([zod.string(), zod.null()]).optional(),
    location: zod.union([zod.string(), zod.null()]).optional(),
  });

/**
 * Update work experience manually.
 * @summary Update Resume Work Experience
 */
export const updateResumeWorkExperienceApiV1ResumesWorkExperiencesWorkIdPutParams =
  zod.object({
    work_id: zod.uuid(),
  });

export const updateResumeWorkExperienceApiV1ResumesWorkExperiencesWorkIdPutBody =
  zod
    .object({
      job_title: zod.union([zod.string(), zod.null()]).optional(),
      company_name: zod.union([zod.string(), zod.null()]).optional(),
      employment_type: zod.union([zod.string(), zod.null()]).optional(),
      start_date: zod.union([zod.string(), zod.null()]).optional(),
      end_date: zod.union([zod.string(), zod.null()]).optional(),
      location: zod.union([zod.string(), zod.null()]).optional(),
      description: zod.union([zod.string(), zod.null()]).optional(),
      achievements: zod.union([zod.array(zod.string()), zod.null()]).optional(),
    })
    .describe("Request model for updating resume work experience.");

export const updateResumeWorkExperienceApiV1ResumesWorkExperiencesWorkIdPutResponse =
  zod.object({
    id: zod.uuid(),
    user_id: zod.uuid(),
    job_id: zod.uuid(),
    parent_id: zod.union([zod.uuid(), zod.null()]).optional(),
    job_title: zod.string(),
    company_name: zod.string(),
    employment_type: zod.union([zod.string(), zod.null()]).optional(),
    start_date: zod.union([zod.string(), zod.null()]).optional(),
    end_date: zod.union([zod.string(), zod.null()]).optional(),
    location: zod.union([zod.string(), zod.null()]).optional(),
  });

/**
 * Enhance work experience using AI.
 * @summary Enhance Resume Work Experience
 */
export const enhanceResumeWorkExperienceApiV1ResumesWorkExperiencesWorkIdEnhancePostParams =
  zod.object({
    work_id: zod.uuid(),
  });

export const enhanceResumeWorkExperienceApiV1ResumesWorkExperiencesWorkIdEnhancePostBodyAgentModeDefault = false;
export const enhanceResumeWorkExperienceApiV1ResumesWorkExperiencesWorkIdEnhancePostBodyToneDefault =
  "professional";

export const enhanceResumeWorkExperienceApiV1ResumesWorkExperiencesWorkIdEnhancePostBody =
  zod
    .object({
      prompt: zod.string(),
      agent_mode: zod.boolean().optional(),
      tone: zod
        .union([zod.string(), zod.null()])
        .default(
          enhanceResumeWorkExperienceApiV1ResumesWorkExperiencesWorkIdEnhancePostBodyToneDefault
        ),
      context: zod
        .union([zod.record(zod.string(), zod.any()), zod.null()])
        .optional(),
    })
    .describe("Request model for AI enhancement.");

export const enhanceResumeWorkExperienceApiV1ResumesWorkExperiencesWorkIdEnhancePostResponse =
  zod.object({
    id: zod.uuid(),
    user_id: zod.uuid(),
    job_id: zod.uuid(),
    parent_id: zod.union([zod.uuid(), zod.null()]).optional(),
    job_title: zod.string(),
    company_name: zod.string(),
    employment_type: zod.union([zod.string(), zod.null()]).optional(),
    start_date: zod.union([zod.string(), zod.null()]).optional(),
    end_date: zod.union([zod.string(), zod.null()]).optional(),
    location: zod.union([zod.string(), zod.null()]).optional(),
  });

/**
 * Get specific project by ID.
 * @summary Get Resume Project
 */
export const getResumeProjectApiV1ResumesProjectsProjectIdGetParams =
  zod.object({
    project_id: zod.uuid(),
  });

export const getResumeProjectApiV1ResumesProjectsProjectIdGetResponse =
  zod.object({
    id: zod.uuid(),
    user_id: zod.uuid(),
    job_id: zod.uuid(),
    parent_id: zod.union([zod.uuid(), zod.null()]).optional(),
    project_name: zod.string(),
    role: zod.union([zod.string(), zod.null()]).optional(),
    start_date: zod.union([zod.string(), zod.null()]).optional(),
    end_date: zod.union([zod.string(), zod.null()]).optional(),
    location: zod.union([zod.string(), zod.null()]).optional(),
    description: zod.union([zod.string(), zod.null()]).optional(),
  });

/**
 * Update project manually.
 * @summary Update Resume Project
 */
export const updateResumeProjectApiV1ResumesProjectsProjectIdPutParams =
  zod.object({
    project_id: zod.uuid(),
  });

export const updateResumeProjectApiV1ResumesProjectsProjectIdPutBody = zod
  .object({
    project_name: zod.union([zod.string(), zod.null()]).optional(),
    role: zod.union([zod.string(), zod.null()]).optional(),
    start_date: zod.union([zod.string(), zod.null()]).optional(),
    end_date: zod.union([zod.string(), zod.null()]).optional(),
    location: zod.union([zod.string(), zod.null()]).optional(),
    description: zod.union([zod.string(), zod.null()]).optional(),
    technologies: zod.union([zod.array(zod.string()), zod.null()]).optional(),
    url: zod.union([zod.string(), zod.null()]).optional(),
  })
  .describe("Request model for updating resume project.");

export const updateResumeProjectApiV1ResumesProjectsProjectIdPutResponse =
  zod.object({
    id: zod.uuid(),
    user_id: zod.uuid(),
    job_id: zod.uuid(),
    parent_id: zod.union([zod.uuid(), zod.null()]).optional(),
    project_name: zod.string(),
    role: zod.union([zod.string(), zod.null()]).optional(),
    start_date: zod.union([zod.string(), zod.null()]).optional(),
    end_date: zod.union([zod.string(), zod.null()]).optional(),
    location: zod.union([zod.string(), zod.null()]).optional(),
    description: zod.union([zod.string(), zod.null()]).optional(),
  });

/**
 * Enhance project using AI.
 * @summary Enhance Resume Project
 */
export const enhanceResumeProjectApiV1ResumesProjectsProjectIdEnhancePostParams =
  zod.object({
    project_id: zod.uuid(),
  });

export const enhanceResumeProjectApiV1ResumesProjectsProjectIdEnhancePostBodyAgentModeDefault = false;
export const enhanceResumeProjectApiV1ResumesProjectsProjectIdEnhancePostBodyToneDefault =
  "professional";

export const enhanceResumeProjectApiV1ResumesProjectsProjectIdEnhancePostBody =
  zod
    .object({
      prompt: zod.string(),
      agent_mode: zod.boolean().optional(),
      tone: zod
        .union([zod.string(), zod.null()])
        .default(
          enhanceResumeProjectApiV1ResumesProjectsProjectIdEnhancePostBodyToneDefault
        ),
      context: zod
        .union([zod.record(zod.string(), zod.any()), zod.null()])
        .optional(),
    })
    .describe("Request model for AI enhancement.");

export const enhanceResumeProjectApiV1ResumesProjectsProjectIdEnhancePostResponse =
  zod.object({
    id: zod.uuid(),
    user_id: zod.uuid(),
    job_id: zod.uuid(),
    parent_id: zod.union([zod.uuid(), zod.null()]).optional(),
    project_name: zod.string(),
    role: zod.union([zod.string(), zod.null()]).optional(),
    start_date: zod.union([zod.string(), zod.null()]).optional(),
    end_date: zod.union([zod.string(), zod.null()]).optional(),
    location: zod.union([zod.string(), zod.null()]).optional(),
    description: zod.union([zod.string(), zod.null()]).optional(),
  });

/**
 * Get specific skill by ID.
 * @summary Get Resume Skill
 */
export const getResumeSkillApiV1ResumesSkillsSkillIdGetParams = zod.object({
  skill_id: zod.uuid(),
});

export const getResumeSkillApiV1ResumesSkillsSkillIdGetResponse = zod.object({
  id: zod.uuid(),
  user_id: zod.uuid(),
  job_id: zod.uuid(),
  parent_id: zod.union([zod.uuid(), zod.null()]).optional(),
  skill_name: zod.string(),
  skill_category: zod.union([zod.string(), zod.null()]).optional(),
  proficiency_level: zod.union([zod.string(), zod.null()]).optional(),
});

/**
 * Update skill manually.
 * @summary Update Resume Skill
 */
export const updateResumeSkillApiV1ResumesSkillsSkillIdPutParams = zod.object({
  skill_id: zod.uuid(),
});

export const updateResumeSkillApiV1ResumesSkillsSkillIdPutBody = zod
  .object({
    skill_name: zod.union([zod.string(), zod.null()]).optional(),
    skill_category: zod.union([zod.string(), zod.null()]).optional(),
    proficiency_level: zod.union([zod.string(), zod.null()]).optional(),
    years_of_experience: zod.union([zod.number(), zod.null()]).optional(),
  })
  .describe("Request model for updating resume skill.");

export const updateResumeSkillApiV1ResumesSkillsSkillIdPutResponse = zod.object(
  {
    id: zod.uuid(),
    user_id: zod.uuid(),
    job_id: zod.uuid(),
    parent_id: zod.union([zod.uuid(), zod.null()]).optional(),
    skill_name: zod.string(),
    skill_category: zod.union([zod.string(), zod.null()]).optional(),
    proficiency_level: zod.union([zod.string(), zod.null()]).optional(),
  }
);

/**
 * Enhance skill using AI.
 * @summary Enhance Resume Skill
 */
export const enhanceResumeSkillApiV1ResumesSkillsSkillIdEnhancePostParams =
  zod.object({
    skill_id: zod.uuid(),
  });

export const enhanceResumeSkillApiV1ResumesSkillsSkillIdEnhancePostBodyAgentModeDefault = false;
export const enhanceResumeSkillApiV1ResumesSkillsSkillIdEnhancePostBodyToneDefault =
  "professional";

export const enhanceResumeSkillApiV1ResumesSkillsSkillIdEnhancePostBody = zod
  .object({
    prompt: zod.string(),
    agent_mode: zod.boolean().optional(),
    tone: zod
      .union([zod.string(), zod.null()])
      .default(
        enhanceResumeSkillApiV1ResumesSkillsSkillIdEnhancePostBodyToneDefault
      ),
    context: zod
      .union([zod.record(zod.string(), zod.any()), zod.null()])
      .optional(),
  })
  .describe("Request model for AI enhancement.");

export const enhanceResumeSkillApiV1ResumesSkillsSkillIdEnhancePostResponse =
  zod.object({
    id: zod.uuid(),
    user_id: zod.uuid(),
    job_id: zod.uuid(),
    parent_id: zod.union([zod.uuid(), zod.null()]).optional(),
    skill_name: zod.string(),
    skill_category: zod.union([zod.string(), zod.null()]).optional(),
    proficiency_level: zod.union([zod.string(), zod.null()]).optional(),
  });

/**
 * Get all education entries for the current user.
 * @summary Get Profile Educations
 */
export const getProfileEducationsApiV1ProfileEducationsGetResponse = zod
  .object({
    educations: zod.array(
      zod.object({
        id: zod.uuid(),
        user_id: zod.uuid(),
        institution_name: zod.string(),
        degree: zod.enum([
          "high_school",
          "associate",
          "bachelor",
          "master",
          "doctorate",
          "professional",
          "certificate",
          "diploma",
          "exchange",
          "other",
        ]),
        field_of_study: zod.string(),
        focus_area: zod.union([zod.string(), zod.null()]).optional(),
        start_date: zod.union([zod.string(), zod.null()]).optional(),
        end_date: zod.union([zod.string(), zod.null()]).optional(),
        gpa: zod.union([zod.number(), zod.null()]).optional(),
        max_gpa: zod.union([zod.number(), zod.null()]).optional(),
        created_at: zod.iso.datetime({}),
        updated_at: zod.iso.datetime({}),
      })
    ),
    total: zod.number(),
  })
  .describe("Response model for list of educations.");

/**
 * Create a new education entry.
 * @summary Create Profile Education
 */
export const createProfileEducationApiV1ProfileEducationsPostBody = zod
  .object({
    institution_name: zod.string(),
    degree: zod.enum([
      "high_school",
      "associate",
      "bachelor",
      "master",
      "doctorate",
      "professional",
      "certificate",
      "diploma",
      "exchange",
      "other",
    ]),
    field_of_study: zod.string(),
    focus_area: zod.union([zod.string(), zod.null()]).optional(),
    start_date: zod.union([zod.string(), zod.null()]).optional(),
    end_date: zod.union([zod.string(), zod.null()]).optional(),
    gpa: zod.union([zod.number(), zod.null()]).optional(),
    max_gpa: zod.union([zod.number(), zod.null()]).optional(),
  })
  .describe("Request model for creating education entry.");

/**
 * Get all education entries for the current user.
 * @summary Get Profile Education
 */
export const getProfileEducationApiV1ProfileEducationsEducationIdGetParams =
  zod.object({
    education_id: zod.uuid(),
  });

export const getProfileEducationApiV1ProfileEducationsEducationIdGetResponse =
  zod.object({
    id: zod.uuid(),
    user_id: zod.uuid(),
    institution_name: zod.string(),
    degree: zod.enum([
      "high_school",
      "associate",
      "bachelor",
      "master",
      "doctorate",
      "professional",
      "certificate",
      "diploma",
      "exchange",
      "other",
    ]),
    field_of_study: zod.string(),
    focus_area: zod.union([zod.string(), zod.null()]).optional(),
    start_date: zod.union([zod.string(), zod.null()]).optional(),
    end_date: zod.union([zod.string(), zod.null()]).optional(),
    gpa: zod.union([zod.number(), zod.null()]).optional(),
    max_gpa: zod.union([zod.number(), zod.null()]).optional(),
    created_at: zod.iso.datetime({}),
    updated_at: zod.iso.datetime({}),
  });

/**
 * Update an education entry.
 * @summary Update Profile Education
 */
export const updateProfileEducationApiV1ProfileEducationsEducationIdPutParams =
  zod.object({
    education_id: zod.uuid(),
  });

export const updateProfileEducationApiV1ProfileEducationsEducationIdPutBody =
  zod
    .object({
      institution_name: zod.union([zod.string(), zod.null()]).optional(),
      degree: zod
        .union([
          zod.enum([
            "high_school",
            "associate",
            "bachelor",
            "master",
            "doctorate",
            "professional",
            "certificate",
            "diploma",
            "exchange",
            "other",
          ]),
          zod.null(),
        ])
        .optional(),
      field_of_study: zod.union([zod.string(), zod.null()]).optional(),
      focus_area: zod.union([zod.string(), zod.null()]).optional(),
      start_date: zod.union([zod.string(), zod.null()]).optional(),
      end_date: zod.union([zod.string(), zod.null()]).optional(),
      gpa: zod.union([zod.number(), zod.null()]).optional(),
      max_gpa: zod.union([zod.number(), zod.null()]).optional(),
    })
    .describe("Request model for updating education entry.");

export const updateProfileEducationApiV1ProfileEducationsEducationIdPutResponse =
  zod.object({
    id: zod.uuid(),
    user_id: zod.uuid(),
    institution_name: zod.string(),
    degree: zod.enum([
      "high_school",
      "associate",
      "bachelor",
      "master",
      "doctorate",
      "professional",
      "certificate",
      "diploma",
      "exchange",
      "other",
    ]),
    field_of_study: zod.string(),
    focus_area: zod.union([zod.string(), zod.null()]).optional(),
    start_date: zod.union([zod.string(), zod.null()]).optional(),
    end_date: zod.union([zod.string(), zod.null()]).optional(),
    gpa: zod.union([zod.number(), zod.null()]).optional(),
    max_gpa: zod.union([zod.number(), zod.null()]).optional(),
    created_at: zod.iso.datetime({}),
    updated_at: zod.iso.datetime({}),
  });

/**
 * Delete an education entry.
 * @summary Delete Profile Education
 */
export const deleteProfileEducationApiV1ProfileEducationsEducationIdDeleteParams =
  zod.object({
    education_id: zod.uuid(),
  });

/**
 * Get all work experiences for the current user.
 * @summary Get Profile Work Experiences
 */
export const getProfileWorkExperiencesApiV1ProfileWorkExperiencesGetResponse =
  zod
    .object({
      work_experiences: zod.array(
        zod.object({
          id: zod.uuid(),
          user_id: zod.uuid(),
          company_name: zod.string(),
          position_title: zod.string(),
          employment_type: zod.enum([
            "full_time",
            "part_time",
            "contract",
            "freelance",
            "internship",
            "volunteer",
            "other",
          ]),
          location: zod.union([zod.string(), zod.null()]).optional(),
          start_date: zod.union([zod.string(), zod.null()]).optional(),
          end_date: zod.union([zod.string(), zod.null()]).optional(),
          responsibilities: zod
            .union([
              zod.array(
                zod.object({
                  id: zod.uuid(),
                  work_id: zod.uuid(),
                  user_id: zod.uuid(),
                  description: zod.string(),
                  created_at: zod.iso.datetime({}),
                  updated_at: zod.iso.datetime({}),
                })
              ),
              zod.null(),
            ])
            .optional(),
          created_at: zod.iso.datetime({}),
          updated_at: zod.iso.datetime({}),
        })
      ),
      total: zod.number(),
    })
    .describe("Response model for list of work experiences.");

/**
 * Create a new work experience entry.
 * @summary Create Profile Work Experience
 */
export const createProfileWorkExperienceApiV1ProfileWorkExperiencesPostBody =
  zod
    .object({
      company_name: zod.string(),
      position_title: zod.string(),
      employment_type: zod.enum([
        "full_time",
        "part_time",
        "contract",
        "freelance",
        "internship",
        "volunteer",
        "other",
      ]),
      location: zod.union([zod.string(), zod.null()]).optional(),
      start_date: zod.union([zod.string(), zod.null()]).optional(),
      end_date: zod.union([zod.string(), zod.null()]).optional(),
      responsibilities: zod
        .union([zod.array(zod.string()), zod.null()])
        .optional(),
    })
    .describe("Request model for creating work experience.");

/**
 * Get a single work experience entry by ID for the current user.
 * @summary Get Profile Work Experience
 */
export const getProfileWorkExperienceApiV1ProfileWorkExperiencesWorkIdGetParams =
  zod.object({
    work_id: zod.uuid(),
  });

export const getProfileWorkExperienceApiV1ProfileWorkExperiencesWorkIdGetResponse =
  zod.object({
    id: zod.uuid(),
    user_id: zod.uuid(),
    company_name: zod.string(),
    position_title: zod.string(),
    employment_type: zod.enum([
      "full_time",
      "part_time",
      "contract",
      "freelance",
      "internship",
      "volunteer",
      "other",
    ]),
    location: zod.union([zod.string(), zod.null()]).optional(),
    start_date: zod.union([zod.string(), zod.null()]).optional(),
    end_date: zod.union([zod.string(), zod.null()]).optional(),
    responsibilities: zod
      .union([
        zod.array(
          zod.object({
            id: zod.uuid(),
            work_id: zod.uuid(),
            user_id: zod.uuid(),
            description: zod.string(),
            created_at: zod.iso.datetime({}),
            updated_at: zod.iso.datetime({}),
          })
        ),
        zod.null(),
      ])
      .optional(),
    created_at: zod.iso.datetime({}),
    updated_at: zod.iso.datetime({}),
  });

/**
 * Update a work experience entry.
 * @summary Update Profile Work Experience
 */
export const updateProfileWorkExperienceApiV1ProfileWorkExperiencesWorkIdPutParams =
  zod.object({
    work_id: zod.uuid(),
  });

export const updateProfileWorkExperienceApiV1ProfileWorkExperiencesWorkIdPutBody =
  zod
    .object({
      company_name: zod.union([zod.string(), zod.null()]).optional(),
      position_title: zod.union([zod.string(), zod.null()]).optional(),
      employment_type: zod
        .union([
          zod.enum([
            "full_time",
            "part_time",
            "contract",
            "freelance",
            "internship",
            "volunteer",
            "other",
          ]),
          zod.null(),
        ])
        .optional(),
      location: zod.union([zod.string(), zod.null()]).optional(),
      start_date: zod.union([zod.string(), zod.null()]).optional(),
      end_date: zod.union([zod.string(), zod.null()]).optional(),
    })
    .describe("Request model for updating work experience.");

export const updateProfileWorkExperienceApiV1ProfileWorkExperiencesWorkIdPutResponse =
  zod.object({
    id: zod.uuid(),
    user_id: zod.uuid(),
    company_name: zod.string(),
    position_title: zod.string(),
    employment_type: zod.enum([
      "full_time",
      "part_time",
      "contract",
      "freelance",
      "internship",
      "volunteer",
      "other",
    ]),
    location: zod.union([zod.string(), zod.null()]).optional(),
    start_date: zod.union([zod.string(), zod.null()]).optional(),
    end_date: zod.union([zod.string(), zod.null()]).optional(),
    responsibilities: zod
      .union([
        zod.array(
          zod.object({
            id: zod.uuid(),
            work_id: zod.uuid(),
            user_id: zod.uuid(),
            description: zod.string(),
            created_at: zod.iso.datetime({}),
            updated_at: zod.iso.datetime({}),
          })
        ),
        zod.null(),
      ])
      .optional(),
    created_at: zod.iso.datetime({}),
    updated_at: zod.iso.datetime({}),
  });

/**
 * Delete a work experience entry.
 * @summary Delete Profile Work Experience
 */
export const deleteProfileWorkExperienceApiV1ProfileWorkExperiencesWorkIdDeleteParams =
  zod.object({
    work_id: zod.uuid(),
  });

/**
 * Add a responsibility to a work experience.
 * @summary Add Profile Work Responsibility
 */
export const addProfileWorkResponsibilityApiV1ProfileWorkExperiencesWorkIdResponsibilitiesPostParams =
  zod.object({
    work_id: zod.uuid(),
  });

export const addProfileWorkResponsibilityApiV1ProfileWorkExperiencesWorkIdResponsibilitiesPostBody =
  zod
    .object({
      description: zod.string(),
    })
    .describe("Request model for work responsibility.");

/**
 * Delete a responsibility from a work experience.
 * @summary Delete Profile Work Responsibility
 */
export const deleteProfileWorkResponsibilityApiV1ProfileWorkExperiencesWorkIdResponsibilitiesResponsibilityIdDeleteParams =
  zod.object({
    work_id: zod.uuid(),
    responsibility_id: zod.uuid(),
  });

/**
 * Get all projects for the current user.
 * @summary Get Profile Projects
 */
export const getProfileProjectsApiV1ProfileProjectsGetResponse = zod
  .object({
    projects: zod.array(
      zod.object({
        id: zod.uuid(),
        user_id: zod.uuid(),
        project_name: zod.string(),
        description: zod.union([zod.string(), zod.null()]).optional(),
        start_date: zod.union([zod.string(), zod.null()]).optional(),
        end_date: zod.union([zod.string(), zod.null()]).optional(),
        project_url: zod.union([zod.string(), zod.null()]).optional(),
        repository_url: zod.union([zod.string(), zod.null()]).optional(),
        created_at: zod.iso.datetime({}),
        updated_at: zod.iso.datetime({}),
      })
    ),
    total: zod.number(),
  })
  .describe("Response model for list of projects.");

/**
 * Create a new project.
 * @summary Create Profile Project
 */
export const createProfileProjectApiV1ProfileProjectsPostBody = zod
  .object({
    project_name: zod.string(),
    description: zod.union([zod.string(), zod.null()]).optional(),
    start_date: zod.union([zod.string(), zod.null()]).optional(),
    end_date: zod.union([zod.string(), zod.null()]).optional(),
    project_url: zod.union([zod.string(), zod.null()]).optional(),
    repository_url: zod.union([zod.string(), zod.null()]).optional(),
    tasks: zod.union([zod.array(zod.string()), zod.null()]).optional(),
  })
  .describe("Request model for creating project.");

/**
 * Get a single project for the current user.
 * @summary Get Profile Project
 */
export const getProfileProjectApiV1ProfileProjectsProjectIdGetParams =
  zod.object({
    project_id: zod.uuid(),
  });

export const getProfileProjectApiV1ProfileProjectsProjectIdGetResponse =
  zod.object({
    id: zod.uuid(),
    user_id: zod.uuid(),
    project_name: zod.string(),
    description: zod.union([zod.string(), zod.null()]).optional(),
    start_date: zod.union([zod.string(), zod.null()]).optional(),
    end_date: zod.union([zod.string(), zod.null()]).optional(),
    project_url: zod.union([zod.string(), zod.null()]).optional(),
    repository_url: zod.union([zod.string(), zod.null()]).optional(),
    created_at: zod.iso.datetime({}),
    updated_at: zod.iso.datetime({}),
  });

/**
 * Update a project.
 * @summary Update Profile Project
 */
export const updateProfileProjectApiV1ProfileProjectsProjectIdPutParams =
  zod.object({
    project_id: zod.uuid(),
  });

export const updateProfileProjectApiV1ProfileProjectsProjectIdPutBody = zod
  .object({
    project_name: zod.union([zod.string(), zod.null()]).optional(),
    description: zod.union([zod.string(), zod.null()]).optional(),
    start_date: zod.union([zod.string(), zod.null()]).optional(),
    end_date: zod.union([zod.string(), zod.null()]).optional(),
    project_url: zod.union([zod.string(), zod.null()]).optional(),
    repository_url: zod.union([zod.string(), zod.null()]).optional(),
  })
  .describe("Request model for updating project.");

export const updateProfileProjectApiV1ProfileProjectsProjectIdPutResponse =
  zod.object({
    id: zod.uuid(),
    user_id: zod.uuid(),
    project_name: zod.string(),
    description: zod.union([zod.string(), zod.null()]).optional(),
    start_date: zod.union([zod.string(), zod.null()]).optional(),
    end_date: zod.union([zod.string(), zod.null()]).optional(),
    project_url: zod.union([zod.string(), zod.null()]).optional(),
    repository_url: zod.union([zod.string(), zod.null()]).optional(),
    created_at: zod.iso.datetime({}),
    updated_at: zod.iso.datetime({}),
  });

/**
 * Delete a project.
 * @summary Delete Profile Project
 */
export const deleteProfileProjectApiV1ProfileProjectsProjectIdDeleteParams =
  zod.object({
    project_id: zod.uuid(),
  });

/**
 * Add a task to a project.
 * @summary Add Profile Project Task
 */
export const addProfileProjectTaskApiV1ProfileProjectsProjectIdTasksPostParams =
  zod.object({
    project_id: zod.uuid(),
  });

export const addProfileProjectTaskApiV1ProfileProjectsProjectIdTasksPostBody =
  zod
    .object({
      description: zod.string(),
    })
    .describe("Request model for project task.");

/**
 * Delete a task from a project.
 * @summary Delete Profile Project Task
 */
export const deleteProfileProjectTaskApiV1ProfileProjectsProjectIdTasksTaskIdDeleteParams =
  zod.object({
    project_id: zod.uuid(),
    task_id: zod.uuid(),
  });

/**
 * @summary Create Profile Resume Upload Url
 */
export const createProfileResumeUploadUrlApiV1ProfileProfileResumeUploadPostBody =
  zod.object({
    sha256_checksum: zod.string(),
    md5_checksum: zod.string(),
    content_type: zod.union([zod.string(), zod.null()]).optional(),
  });

export const createProfileResumeUploadUrlApiV1ProfileProfileResumeUploadPostResponse =
  zod.object({
    file_id: zod.uuid(),
    upload_url: zod.string(),
    required_headers: zod.record(zod.string(), zod.string()),
  });

/**
 * @summary Start Profile Resume Extraction
 */
export const startProfileResumeExtractionApiV1ProfileProfileResumeExtractResumeIdPostParams =
  zod.object({
    resume_id: zod.uuid(),
  });

export const startProfileResumeExtractionApiV1ProfileProfileResumeExtractResumeIdPostBody =
  zod.object({
    file_id: zod.uuid(),
  });

export const startProfileResumeExtractionApiV1ProfileProfileResumeExtractResumeIdPostResponse =
  zod.object({
    file_id: zod.uuid(),
  });

/**
 * @summary Root
 */
export const rootGetResponse = zod.any();

/**
 * @summary Health Check
 */
export const healthCheckHealthGetResponse = zod.any();
