/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Resume Genius API
 * OpenAPI spec version: 1.0.0
 */
import type {
  BodyTokenApiV1AuthTokenPost,
  CreateJobApiV1JobsCreatePostParams,
  CreateJobRequest,
  CreateJobResponse,
  GetMeApiV1AuthMeGetParams,
  GetStatusApiV1JobsJobIdStatusGetParams,
  LoginApiV1AuthLoginPostParams,
  LogoutApiV1AuthLogoutPostParams,
  ProcessingStatus,
  RefineResumeApiV1JobsJobIdRefinePostParams,
  RefreshTokenApiV1AuthRefreshPostParams,
  RefreshTokenRequest,
  RefreshTokenResponse,
  RegisterApiV1AuthRegisterPostParams,
  Resume,
  ResumeListItem,
  SelectRelevantInfoApiV1JobsJobIdSelectRelevantInfoPostParams,
  StreamStatusApiV1JobsJobIdStatusStreamGetParams,
  TestApiKeyApiV1AuthTestApiKeyGet200,
  TestApiKeyApiV1AuthTestApiKeyGetParams,
  TokenApiV1AuthTokenPostParams,
  UserLoginRequest,
  UserLoginResponse,
  UserRegisterRequest,
  UserRegisterResponse,
  UserResponse,
  VerifyTokenApiV1AuthVerifyTokenGet200,
  VerifyTokenApiV1AuthVerifyTokenGetParams,
} from "./schemas";

import { customAxiosInstance } from "../orval-axios";
/**
 * Register a new user.
 * @summary Register
 */
export const registerApiV1AuthRegisterPost = (
  userRegisterRequest: UserRegisterRequest,
  params?: RegisterApiV1AuthRegisterPostParams
) => {
  return customAxiosInstance<UserRegisterResponse>({
    url: `/api/v1/auth/register`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: userRegisterRequest,
    params,
  });
};

/**
 * Login user and create session.
 * @summary Login
 */
export const loginApiV1AuthLoginPost = (
  userLoginRequest: UserLoginRequest,
  params?: LoginApiV1AuthLoginPostParams
) => {
  return customAxiosInstance<UserLoginResponse>({
    url: `/api/v1/auth/login`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: userLoginRequest,
    params,
  });
};

/**
 * OAuth2 compatible token endpoint for Swagger UI authentication.

This endpoint accepts username (email) and password via form data
and returns an access token in OAuth2 format.
 * @summary Token
 */
export const tokenApiV1AuthTokenPost = (
  bodyTokenApiV1AuthTokenPost: BodyTokenApiV1AuthTokenPost,
  params?: TokenApiV1AuthTokenPostParams
) => {
  const formUrlEncoded = new URLSearchParams();
  if (
    bodyTokenApiV1AuthTokenPost.grant_type !== undefined &&
    bodyTokenApiV1AuthTokenPost.grant_type !== null
  ) {
    formUrlEncoded.append(`grant_type`, bodyTokenApiV1AuthTokenPost.grant_type);
  }
  formUrlEncoded.append(`username`, bodyTokenApiV1AuthTokenPost.username);
  formUrlEncoded.append(`password`, bodyTokenApiV1AuthTokenPost.password);
  if (bodyTokenApiV1AuthTokenPost.scope !== undefined) {
    formUrlEncoded.append(`scope`, bodyTokenApiV1AuthTokenPost.scope);
  }
  if (
    bodyTokenApiV1AuthTokenPost.client_id !== undefined &&
    bodyTokenApiV1AuthTokenPost.client_id !== null
  ) {
    formUrlEncoded.append(`client_id`, bodyTokenApiV1AuthTokenPost.client_id);
  }
  if (
    bodyTokenApiV1AuthTokenPost.client_secret !== undefined &&
    bodyTokenApiV1AuthTokenPost.client_secret !== null
  ) {
    formUrlEncoded.append(
      `client_secret`,
      bodyTokenApiV1AuthTokenPost.client_secret
    );
  }

  return customAxiosInstance<unknown>({
    url: `/api/v1/auth/token`,
    method: "POST",
    headers: { "Content-Type": "application/x-www-form-urlencoded" },
    data: formUrlEncoded,
    params,
  });
};

/**
 * Refresh access token using refresh token.
 * @summary Refresh Token
 */
export const refreshTokenApiV1AuthRefreshPost = (
  refreshTokenRequest: RefreshTokenRequest,
  params?: RefreshTokenApiV1AuthRefreshPostParams
) => {
  return customAxiosInstance<RefreshTokenResponse>({
    url: `/api/v1/auth/refresh`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: refreshTokenRequest,
    params,
  });
};

/**
 * Logout user by revoking tokens.
 * @summary Logout
 */
export const logoutApiV1AuthLogoutPost = (
  params?: LogoutApiV1AuthLogoutPostParams
) => {
  return customAxiosInstance<null>({
    url: `/api/v1/auth/logout`,
    method: "POST",
    params,
  });
};

/**
 * Get current user information.
 * @summary Get Me
 */
export const getMeApiV1AuthMeGet = (params?: GetMeApiV1AuthMeGetParams) => {
  return customAxiosInstance<UserResponse>({
    url: `/api/v1/auth/me`,
    method: "GET",
    params,
  });
};

/**
 * Verify if token is valid.
 * @summary Verify Token
 */
export const verifyTokenApiV1AuthVerifyTokenGet = (
  params?: VerifyTokenApiV1AuthVerifyTokenGetParams
) => {
  return customAxiosInstance<VerifyTokenApiV1AuthVerifyTokenGet200>({
    url: `/api/v1/auth/verify-token`,
    method: "GET",
    params,
  });
};

/**
 * Test endpoint that requires API key authentication.
 * @summary Test Api Key
 */
export const testApiKeyApiV1AuthTestApiKeyGet = (
  params?: TestApiKeyApiV1AuthTestApiKeyGetParams
) => {
  return customAxiosInstance<TestApiKeyApiV1AuthTestApiKeyGet200>({
    url: `/api/v1/auth/test-api-key`,
    method: "GET",
    params,
  });
};

/**
 * List all resume versions for a specific job
 * @summary List Resume Versions
 */
export const listResumeVersionsApiV1UsersUserIdJobsJobIdResumesGet = (
  userId: string,
  jobId: string
) => {
  return customAxiosInstance<ResumeListItem[]>({
    url: `/api/v1/users/${userId}/jobs/${jobId}/resumes/`,
    method: "GET",
  });
};

/**
 * Create a new resume version
 * @summary Create Resume Version
 */
export const createResumeVersionApiV1UsersUserIdJobsJobIdResumesPost = (
  userId: string,
  jobId: string,
  resume: Resume
) => {
  return customAxiosInstance<Resume>({
    url: `/api/v1/users/${userId}/jobs/${jobId}/resumes/`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: resume,
  });
};

/**
 * Get a specific resume version
 * @summary Get Resume Version
 */
export const getResumeVersionApiV1UsersUserIdJobsJobIdResumesVersionGet = (
  userId: string,
  jobId: string,
  version: string
) => {
  return customAxiosInstance<Resume>({
    url: `/api/v1/users/${userId}/jobs/${jobId}/resumes/${version}`,
    method: "GET",
  });
};

/**
 * Get the latest resume version (backward compatibility)
 * @summary Get Latest Resume
 */
export const getLatestResumeApiV1UsersUserIdJobsJobIdResumeGet = (
  userId: string,
  jobId: string
) => {
  return customAxiosInstance<Resume>({
    url: `/api/v1/users/${userId}/jobs/${jobId}/resume`,
    method: "GET",
  });
};

/**
 * @summary Create Job
 */
export const createJobApiV1JobsCreatePost = (
  createJobRequest: CreateJobRequest,
  params?: CreateJobApiV1JobsCreatePostParams
) => {
  return customAxiosInstance<CreateJobResponse>({
    url: `/api/v1/jobs/create`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: createJobRequest,
    params,
  });
};

/**
 * @summary Select Relevant Info
 */
export const selectRelevantInfoApiV1JobsJobIdSelectRelevantInfoPost = (
  jobId: string,
  params?: SelectRelevantInfoApiV1JobsJobIdSelectRelevantInfoPostParams
) => {
  return customAxiosInstance<unknown>({
    url: `/api/v1/jobs/${jobId}/select_relevant_info`,
    method: "POST",
    params,
  });
};

/**
 * @summary Refine Resume
 */
export const refineResumeApiV1JobsJobIdRefinePost = (
  jobId: string,
  params?: RefineResumeApiV1JobsJobIdRefinePostParams
) => {
  return customAxiosInstance<unknown>({
    url: `/api/v1/jobs/${jobId}/refine`,
    method: "POST",
    params,
  });
};

/**
 * @summary Stream Status
 */
export const streamStatusApiV1JobsJobIdStatusStreamGet = (
  jobId: string,
  params?: StreamStatusApiV1JobsJobIdStatusStreamGetParams
) => {
  return customAxiosInstance<unknown>({
    url: `/api/v1/jobs/${jobId}/status-stream`,
    method: "GET",
    params,
  });
};

/**
 * @summary Get Status
 */
export const getStatusApiV1JobsJobIdStatusGet = (
  jobId: string,
  params?: GetStatusApiV1JobsJobIdStatusGetParams
) => {
  return customAxiosInstance<ProcessingStatus>({
    url: `/api/v1/jobs/${jobId}/status`,
    method: "GET",
    params,
  });
};

/**
 * @summary Root
 */
export const rootGet = () => {
  return customAxiosInstance<unknown>({ url: `/`, method: "GET" });
};

/**
 * @summary Health Check
 */
export const healthCheckHealthGet = () => {
  return customAxiosInstance<unknown>({ url: `/health`, method: "GET" });
};

export type RegisterApiV1AuthRegisterPostResult = NonNullable<
  Awaited<ReturnType<typeof registerApiV1AuthRegisterPost>>
>;
export type LoginApiV1AuthLoginPostResult = NonNullable<
  Awaited<ReturnType<typeof loginApiV1AuthLoginPost>>
>;
export type TokenApiV1AuthTokenPostResult = NonNullable<
  Awaited<ReturnType<typeof tokenApiV1AuthTokenPost>>
>;
export type RefreshTokenApiV1AuthRefreshPostResult = NonNullable<
  Awaited<ReturnType<typeof refreshTokenApiV1AuthRefreshPost>>
>;
export type LogoutApiV1AuthLogoutPostResult = NonNullable<
  Awaited<ReturnType<typeof logoutApiV1AuthLogoutPost>>
>;
export type GetMeApiV1AuthMeGetResult = NonNullable<
  Awaited<ReturnType<typeof getMeApiV1AuthMeGet>>
>;
export type VerifyTokenApiV1AuthVerifyTokenGetResult = NonNullable<
  Awaited<ReturnType<typeof verifyTokenApiV1AuthVerifyTokenGet>>
>;
export type TestApiKeyApiV1AuthTestApiKeyGetResult = NonNullable<
  Awaited<ReturnType<typeof testApiKeyApiV1AuthTestApiKeyGet>>
>;
export type ListResumeVersionsApiV1UsersUserIdJobsJobIdResumesGetResult =
  NonNullable<
    Awaited<
      ReturnType<typeof listResumeVersionsApiV1UsersUserIdJobsJobIdResumesGet>
    >
  >;
export type CreateResumeVersionApiV1UsersUserIdJobsJobIdResumesPostResult =
  NonNullable<
    Awaited<
      ReturnType<typeof createResumeVersionApiV1UsersUserIdJobsJobIdResumesPost>
    >
  >;
export type GetResumeVersionApiV1UsersUserIdJobsJobIdResumesVersionGetResult =
  NonNullable<
    Awaited<
      ReturnType<
        typeof getResumeVersionApiV1UsersUserIdJobsJobIdResumesVersionGet
      >
    >
  >;
export type GetLatestResumeApiV1UsersUserIdJobsJobIdResumeGetResult =
  NonNullable<
    Awaited<
      ReturnType<typeof getLatestResumeApiV1UsersUserIdJobsJobIdResumeGet>
    >
  >;
export type CreateJobApiV1JobsCreatePostResult = NonNullable<
  Awaited<ReturnType<typeof createJobApiV1JobsCreatePost>>
>;
export type SelectRelevantInfoApiV1JobsJobIdSelectRelevantInfoPostResult =
  NonNullable<
    Awaited<
      ReturnType<typeof selectRelevantInfoApiV1JobsJobIdSelectRelevantInfoPost>
    >
  >;
export type RefineResumeApiV1JobsJobIdRefinePostResult = NonNullable<
  Awaited<ReturnType<typeof refineResumeApiV1JobsJobIdRefinePost>>
>;
export type StreamStatusApiV1JobsJobIdStatusStreamGetResult = NonNullable<
  Awaited<ReturnType<typeof streamStatusApiV1JobsJobIdStatusStreamGet>>
>;
export type GetStatusApiV1JobsJobIdStatusGetResult = NonNullable<
  Awaited<ReturnType<typeof getStatusApiV1JobsJobIdStatusGet>>
>;
export type RootGetResult = NonNullable<Awaited<ReturnType<typeof rootGet>>>;
export type HealthCheckHealthGetResult = NonNullable<
  Awaited<ReturnType<typeof healthCheckHealthGet>>
>;
