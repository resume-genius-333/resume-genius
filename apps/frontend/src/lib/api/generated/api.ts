/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Resume Genius API
 * OpenAPI spec version: 1.0.0
 */
import type {
  AIEnhanceRequest,
  BodyTokenApiV1AuthTokenPost,
  CreateJobRequest,
  CreateJobResponse,
  CreateResumeVersionRequest,
  EducationCreateRequest,
  EducationListResponse,
  EducationSchema,
  EducationUpdateRequest,
  FullResumeResponse,
  GetLatestResumeVersionApiV1ResumesLatestGetParams,
  JobSchema,
  ListJobsApiV1JobsGetParams,
  ListResumeVersionsApiV1ResumesGetParams,
  PaginatedResponse,
  PaginatedResponseJobSchema,
  ProcessingStatus,
  ProjectCreateRequest,
  ProjectListResponse,
  ProjectResponse,
  ProjectTaskRequest,
  ProjectTaskResponse,
  ProjectUpdateRequest,
  RefineResumeResponse,
  RefreshTokenRequest,
  RefreshTokenResponse,
  ResumeEducationRequest,
  ResumeEducationResponse,
  ResumeMetadataRequest,
  ResumeMetadataResponse,
  ResumeProjectRequest,
  ResumeProjectResponse,
  ResumeSkillRequest,
  ResumeSkillResponse,
  ResumeVersionResponse,
  ResumeWorkExperienceRequest,
  ResumeWorkExperienceResponse,
  SelectionResult,
  TestApiKeyApiV1AuthTestApiKeyGet200,
  UpdateResumeVersionRequest,
  UserLoginRequest,
  UserLoginResponse,
  UserRegisterRequest,
  UserRegisterResponse,
  UserResponse,
  VerifyTokenApiV1AuthVerifyTokenGet200,
  WorkExperienceCreateRequest,
  WorkExperienceListResponse,
  WorkExperienceResponse,
  WorkExperienceUpdateRequest,
  WorkResponsibilityRequest,
  WorkResponsibilityResponse,
} from "./schemas";

import { customAxiosInstance } from "../client";
/**
 * Register a new user.
 * @summary Register
 */
export const registerApiV1AuthRegisterPost = (
  userRegisterRequest: UserRegisterRequest
) => {
  return customAxiosInstance<UserRegisterResponse>({
    url: `/api/v1/auth/register`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: userRegisterRequest,
  });
};

/**
 * Login user and create session.
 * @summary Login
 */
export const loginApiV1AuthLoginPost = (userLoginRequest: UserLoginRequest) => {
  return customAxiosInstance<UserLoginResponse>({
    url: `/api/v1/auth/login`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: userLoginRequest,
  });
};

/**
 * OAuth2 compatible token endpoint for Swagger UI authentication.

This endpoint accepts username (email) and password via form data
and returns an access token in OAuth2 format.
 * @summary Token
 */
export const tokenApiV1AuthTokenPost = (
  bodyTokenApiV1AuthTokenPost: BodyTokenApiV1AuthTokenPost
) => {
  const formUrlEncoded = new URLSearchParams();
  if (
    bodyTokenApiV1AuthTokenPost.grant_type !== undefined &&
    bodyTokenApiV1AuthTokenPost.grant_type !== null
  ) {
    formUrlEncoded.append(`grant_type`, bodyTokenApiV1AuthTokenPost.grant_type);
  }
  formUrlEncoded.append(`username`, bodyTokenApiV1AuthTokenPost.username);
  formUrlEncoded.append(`password`, bodyTokenApiV1AuthTokenPost.password);
  if (bodyTokenApiV1AuthTokenPost.scope !== undefined) {
    formUrlEncoded.append(`scope`, bodyTokenApiV1AuthTokenPost.scope);
  }
  if (
    bodyTokenApiV1AuthTokenPost.client_id !== undefined &&
    bodyTokenApiV1AuthTokenPost.client_id !== null
  ) {
    formUrlEncoded.append(`client_id`, bodyTokenApiV1AuthTokenPost.client_id);
  }
  if (
    bodyTokenApiV1AuthTokenPost.client_secret !== undefined &&
    bodyTokenApiV1AuthTokenPost.client_secret !== null
  ) {
    formUrlEncoded.append(
      `client_secret`,
      bodyTokenApiV1AuthTokenPost.client_secret
    );
  }

  return customAxiosInstance<unknown>({
    url: `/api/v1/auth/token`,
    method: "POST",
    headers: { "Content-Type": "application/x-www-form-urlencoded" },
    data: formUrlEncoded,
  });
};

/**
 * Refresh access token using refresh token.
 * @summary Refresh Token
 */
export const refreshTokenApiV1AuthRefreshPost = (
  refreshTokenRequest: RefreshTokenRequest
) => {
  return customAxiosInstance<RefreshTokenResponse>({
    url: `/api/v1/auth/refresh`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: refreshTokenRequest,
  });
};

/**
 * Logout user by revoking tokens.
 * @summary Logout
 */
export const logoutApiV1AuthLogoutPost = () => {
  return customAxiosInstance<null>({
    url: `/api/v1/auth/logout`,
    method: "POST",
  });
};

/**
 * Get current user information.
 * @summary Get Me
 */
export const getMeApiV1AuthMeGet = () => {
  return customAxiosInstance<UserResponse>({
    url: `/api/v1/auth/me`,
    method: "GET",
  });
};

/**
 * Verify if token is valid.
 * @summary Verify Token
 */
export const verifyTokenApiV1AuthVerifyTokenGet = () => {
  return customAxiosInstance<VerifyTokenApiV1AuthVerifyTokenGet200>({
    url: `/api/v1/auth/verify-token`,
    method: "GET",
  });
};

/**
 * Test endpoint that requires API key authentication.
 * @summary Test Api Key
 */
export const testApiKeyApiV1AuthTestApiKeyGet = () => {
  return customAxiosInstance<TestApiKeyApiV1AuthTestApiKeyGet200>({
    url: `/api/v1/auth/test-api-key`,
    method: "GET",
  });
};

/**
 * Create a new job and process it in the background.
 * @summary Create Job
 */
export const createJobApiV1JobsCreatePost = (
  createJobRequest: CreateJobRequest
) => {
  return customAxiosInstance<CreateJobResponse>({
    url: `/api/v1/jobs/create`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: createJobRequest,
  });
};

/**
 * List all jobs for the current user with pagination.
 * @summary List Jobs
 */
export const listJobsApiV1JobsGet = (params?: ListJobsApiV1JobsGetParams) => {
  return customAxiosInstance<PaginatedResponseJobSchema>({
    url: `/api/v1/jobs`,
    method: "GET",
    params,
  });
};

/**
 * Get a specific job by ID.
 * @summary Get Job
 */
export const getJobApiV1JobsJobIdGet = (jobId: string) => {
  return customAxiosInstance<JobSchema>({
    url: `/api/v1/jobs/${jobId}`,
    method: "GET",
  });
};

/**
 * Select relevant information from user's resume for the job.
 * @summary Get Selected Educations
 */
export const getSelectedEducationsApiV1JobsJobIdSelectedEducationsGet = (
  jobId: string
) => {
  return customAxiosInstance<SelectionResult>({
    url: `/api/v1/jobs/${jobId}/selected_educations`,
    method: "GET",
  });
};

/**
 * Select relevant information from user's resume for the job.
 * @summary Get Selected Work Experiences
 */
export const getSelectedWorkExperiencesApiV1JobsJobIdSelectedWorkExperiencesGet =
  (jobId: string) => {
    return customAxiosInstance<unknown>({
      url: `/api/v1/jobs/${jobId}/selected_work_experiences`,
      method: "GET",
    });
  };

/**
 * Select relevant information from user's resume for the job.
 * @summary Get Selected Projects
 */
export const getSelectedProjectsApiV1JobsJobIdSelectedProjectsGet = (
  jobId: string
) => {
  return customAxiosInstance<unknown>({
    url: `/api/v1/jobs/${jobId}/selected_projects`,
    method: "GET",
  });
};

/**
 * Select relevant information from user's resume for the job.
 * @summary Get Selected Skills
 */
export const getSelectedSkillsApiV1JobsJobIdSelectedSkillsGet = (
  jobId: string
) => {
  return customAxiosInstance<unknown>({
    url: `/api/v1/jobs/${jobId}/selected_skills`,
    method: "GET",
  });
};

/**
 * Select relevant information from user's resume for the job.
 * @summary Confirm Experience Selection
 */
export const confirmExperienceSelectionApiV1JobsJobIdConfirmExperienceSelectionPost =
  (jobId: string) => {
    return customAxiosInstance<unknown>({
      url: `/api/v1/jobs/${jobId}/confirm_experience_selection`,
      method: "POST",
    });
  };

/**
 * Refine user's resume for the specific job.
 * @summary Refine Resume
 */
export const refineResumeApiV1JobsJobIdRefinePost = (jobId: string) => {
  return customAxiosInstance<RefineResumeResponse>({
    url: `/api/v1/jobs/${jobId}/refine`,
    method: "POST",
  });
};

/**
 * Stream job processing status via Server-Sent Events.
 * @summary Stream Status
 */
export const streamStatusApiV1JobsJobIdStatusStreamGet = (jobId: string) => {
  return customAxiosInstance<unknown>({
    url: `/api/v1/jobs/${jobId}/status-stream`,
    method: "GET",
  });
};

/**
 * Get current processing status for a job.
 * @summary Get Status
 */
export const getStatusApiV1JobsJobIdStatusGet = (jobId: string) => {
  return customAxiosInstance<ProcessingStatus>({
    url: `/api/v1/jobs/${jobId}/status`,
    method: "GET",
  });
};

/**
 * List all resume versions for the current user with pagination.
 * @summary List Resume Versions
 */
export const listResumeVersionsApiV1ResumesGet = (
  params?: ListResumeVersionsApiV1ResumesGetParams
) => {
  return customAxiosInstance<PaginatedResponse>({
    url: `/api/v1/resumes/`,
    method: "GET",
    params,
  });
};

/**
 * Create a new resume version.
 * @summary Create Resume Version
 */
export const createResumeVersionApiV1ResumesPost = (
  createResumeVersionRequest: CreateResumeVersionRequest
) => {
  return customAxiosInstance<ResumeVersionResponse>({
    url: `/api/v1/resumes/`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: createResumeVersionRequest,
  });
};

/**
 * Get the latest resume version for the current user.
 * @summary Get Latest Resume Version
 */
export const getLatestResumeVersionApiV1ResumesLatestGet = (
  params?: GetLatestResumeVersionApiV1ResumesLatestGetParams
) => {
  return customAxiosInstance<ResumeVersionResponse>({
    url: `/api/v1/resumes/latest`,
    method: "GET",
    params,
  });
};

/**
 * Get full resume with all sections for a specific version.
 * @summary Get Full Resume
 */
export const getFullResumeApiV1ResumesVersionIdGet = (versionId: string) => {
  return customAxiosInstance<FullResumeResponse>({
    url: `/api/v1/resumes/${versionId}`,
    method: "GET",
  });
};

/**
 * Update which sections are pinned to a resume version.
 * @summary Update Resume Version
 */
export const updateResumeVersionApiV1ResumesVersionIdPut = (
  versionId: string,
  updateResumeVersionRequest: UpdateResumeVersionRequest
) => {
  return customAxiosInstance<ResumeVersionResponse>({
    url: `/api/v1/resumes/${versionId}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: updateResumeVersionRequest,
  });
};

/**
 * Enhance entire resume version using AI.
 * @summary Enhance Resume Version
 */
export const enhanceResumeVersionApiV1ResumesVersionIdEnhancePost = (
  versionId: string,
  aIEnhanceRequest: AIEnhanceRequest
) => {
  return customAxiosInstance<ResumeVersionResponse>({
    url: `/api/v1/resumes/${versionId}/enhance`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: aIEnhanceRequest,
  });
};

/**
 * Get specific metadata by ID.
 * @summary Get Metadata
 */
export const getMetadataApiV1ResumesMetadataMetadataIdGet = (
  metadataId: string
) => {
  return customAxiosInstance<ResumeMetadataResponse>({
    url: `/api/v1/resumes/metadata/${metadataId}`,
    method: "GET",
  });
};

/**
 * Update metadata manually.
 * @summary Update Metadata
 */
export const updateMetadataApiV1ResumesMetadataMetadataIdPut = (
  metadataId: string,
  resumeMetadataRequest: ResumeMetadataRequest
) => {
  return customAxiosInstance<ResumeMetadataResponse>({
    url: `/api/v1/resumes/metadata/${metadataId}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: resumeMetadataRequest,
  });
};

/**
 * Enhance metadata using AI.
 * @summary Enhance Metadata
 */
export const enhanceMetadataApiV1ResumesMetadataMetadataIdEnhancePost = (
  metadataId: string,
  aIEnhanceRequest: AIEnhanceRequest
) => {
  return customAxiosInstance<ResumeMetadataResponse>({
    url: `/api/v1/resumes/metadata/${metadataId}/enhance`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: aIEnhanceRequest,
  });
};

/**
 * Get specific education entry by ID.
 * @summary Get Resume Education
 */
export const getResumeEducationApiV1ResumesEducationsEducationIdGet = (
  educationId: string
) => {
  return customAxiosInstance<ResumeEducationResponse>({
    url: `/api/v1/resumes/educations/${educationId}`,
    method: "GET",
  });
};

/**
 * Update education entry manually.
 * @summary Update Education
 */
export const updateEducationApiV1ResumesEducationsEducationIdPut = (
  educationId: string,
  resumeEducationRequest: ResumeEducationRequest
) => {
  return customAxiosInstance<ResumeEducationResponse>({
    url: `/api/v1/resumes/educations/${educationId}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: resumeEducationRequest,
  });
};

/**
 * Enhance education entry using AI.
 * @summary Enhance Education
 */
export const enhanceEducationApiV1ResumesEducationsEducationIdEnhancePost = (
  educationId: string,
  aIEnhanceRequest: AIEnhanceRequest
) => {
  return customAxiosInstance<ResumeEducationResponse>({
    url: `/api/v1/resumes/educations/${educationId}/enhance`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: aIEnhanceRequest,
  });
};

/**
 * Get specific work experience by ID.
 * @summary Get Work Experience
 */
export const getWorkExperienceApiV1ResumesWorkExperiencesWorkIdGet = (
  workId: string
) => {
  return customAxiosInstance<ResumeWorkExperienceResponse>({
    url: `/api/v1/resumes/work_experiences/${workId}`,
    method: "GET",
  });
};

/**
 * Update work experience manually.
 * @summary Update Work Experience
 */
export const updateWorkExperienceApiV1ResumesWorkExperiencesWorkIdPut = (
  workId: string,
  resumeWorkExperienceRequest: ResumeWorkExperienceRequest
) => {
  return customAxiosInstance<ResumeWorkExperienceResponse>({
    url: `/api/v1/resumes/work_experiences/${workId}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: resumeWorkExperienceRequest,
  });
};

/**
 * Enhance work experience using AI.
 * @summary Enhance Work Experience
 */
export const enhanceWorkExperienceApiV1ResumesWorkExperiencesWorkIdEnhancePost =
  (workId: string, aIEnhanceRequest: AIEnhanceRequest) => {
    return customAxiosInstance<ResumeWorkExperienceResponse>({
      url: `/api/v1/resumes/work_experiences/${workId}/enhance`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: aIEnhanceRequest,
    });
  };

/**
 * Get specific project by ID.
 * @summary Get Project
 */
export const getProjectApiV1ResumesProjectsProjectIdGet = (
  projectId: string
) => {
  return customAxiosInstance<ResumeProjectResponse>({
    url: `/api/v1/resumes/projects/${projectId}`,
    method: "GET",
  });
};

/**
 * Update project manually.
 * @summary Update Project
 */
export const updateProjectApiV1ResumesProjectsProjectIdPut = (
  projectId: string,
  resumeProjectRequest: ResumeProjectRequest
) => {
  return customAxiosInstance<ResumeProjectResponse>({
    url: `/api/v1/resumes/projects/${projectId}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: resumeProjectRequest,
  });
};

/**
 * Enhance project using AI.
 * @summary Enhance Project
 */
export const enhanceProjectApiV1ResumesProjectsProjectIdEnhancePost = (
  projectId: string,
  aIEnhanceRequest: AIEnhanceRequest
) => {
  return customAxiosInstance<ResumeProjectResponse>({
    url: `/api/v1/resumes/projects/${projectId}/enhance`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: aIEnhanceRequest,
  });
};

/**
 * Get specific skill by ID.
 * @summary Get Skill
 */
export const getSkillApiV1ResumesSkillsSkillIdGet = (skillId: string) => {
  return customAxiosInstance<ResumeSkillResponse>({
    url: `/api/v1/resumes/skills/${skillId}`,
    method: "GET",
  });
};

/**
 * Update skill manually.
 * @summary Update Skill
 */
export const updateSkillApiV1ResumesSkillsSkillIdPut = (
  skillId: string,
  resumeSkillRequest: ResumeSkillRequest
) => {
  return customAxiosInstance<ResumeSkillResponse>({
    url: `/api/v1/resumes/skills/${skillId}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: resumeSkillRequest,
  });
};

/**
 * Enhance skill using AI.
 * @summary Enhance Skill
 */
export const enhanceSkillApiV1ResumesSkillsSkillIdEnhancePost = (
  skillId: string,
  aIEnhanceRequest: AIEnhanceRequest
) => {
  return customAxiosInstance<ResumeSkillResponse>({
    url: `/api/v1/resumes/skills/${skillId}/enhance`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: aIEnhanceRequest,
  });
};

/**
 * Get all education entries for the current user.
 * @summary Get Educations
 */
export const getEducationsApiV1ProfileEducationsGet = () => {
  return customAxiosInstance<EducationListResponse>({
    url: `/api/v1/profile/educations`,
    method: "GET",
  });
};

/**
 * Create a new education entry.
 * @summary Create Education
 */
export const createEducationApiV1ProfileEducationsPost = (
  educationCreateRequest: EducationCreateRequest
) => {
  return customAxiosInstance<EducationSchema>({
    url: `/api/v1/profile/educations`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: educationCreateRequest,
  });
};

/**
 * Get all education entries for the current user.
 * @summary Get Profile Education
 */
export const getProfileEducationApiV1ProfileEducationsEducationIdGet = (
  educationId: string
) => {
  return customAxiosInstance<EducationSchema>({
    url: `/api/v1/profile/educations/${educationId}`,
    method: "GET",
  });
};

/**
 * Update an education entry.
 * @summary Update Education
 */
export const updateEducationApiV1ProfileEducationsEducationIdPut = (
  educationId: string,
  educationUpdateRequest: EducationUpdateRequest
) => {
  return customAxiosInstance<EducationSchema>({
    url: `/api/v1/profile/educations/${educationId}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: educationUpdateRequest,
  });
};

/**
 * Delete an education entry.
 * @summary Delete Education
 */
export const deleteEducationApiV1ProfileEducationsEducationIdDelete = (
  educationId: string
) => {
  return customAxiosInstance<null>({
    url: `/api/v1/profile/educations/${educationId}`,
    method: "DELETE",
  });
};

/**
 * Get all work experiences for the current user.
 * @summary Get Work Experiences
 */
export const getWorkExperiencesApiV1ProfileWorkExperiencesGet = () => {
  return customAxiosInstance<WorkExperienceListResponse>({
    url: `/api/v1/profile/work-experiences`,
    method: "GET",
  });
};

/**
 * Create a new work experience entry.
 * @summary Create Work Experience
 */
export const createWorkExperienceApiV1ProfileWorkExperiencesPost = (
  workExperienceCreateRequest: WorkExperienceCreateRequest
) => {
  return customAxiosInstance<WorkExperienceResponse>({
    url: `/api/v1/profile/work-experiences`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: workExperienceCreateRequest,
  });
};

/**
 * Update a work experience entry.
 * @summary Update Work Experience
 */
export const updateWorkExperienceApiV1ProfileWorkExperiencesWorkIdPut = (
  workId: string,
  workExperienceUpdateRequest: WorkExperienceUpdateRequest
) => {
  return customAxiosInstance<WorkExperienceResponse>({
    url: `/api/v1/profile/work-experiences/${workId}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: workExperienceUpdateRequest,
  });
};

/**
 * Delete a work experience entry.
 * @summary Delete Work Experience
 */
export const deleteWorkExperienceApiV1ProfileWorkExperiencesWorkIdDelete = (
  workId: string
) => {
  return customAxiosInstance<null>({
    url: `/api/v1/profile/work-experiences/${workId}`,
    method: "DELETE",
  });
};

/**
 * Add a responsibility to a work experience.
 * @summary Add Work Responsibility
 */
export const addWorkResponsibilityApiV1ProfileWorkExperiencesWorkIdResponsibilitiesPost =
  (workId: string, workResponsibilityRequest: WorkResponsibilityRequest) => {
    return customAxiosInstance<WorkResponsibilityResponse>({
      url: `/api/v1/profile/work-experiences/${workId}/responsibilities`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: workResponsibilityRequest,
    });
  };

/**
 * Delete a responsibility from a work experience.
 * @summary Delete Work Responsibility
 */
export const deleteWorkResponsibilityApiV1ProfileWorkExperiencesWorkIdResponsibilitiesResponsibilityIdDelete =
  (workId: string, responsibilityId: string) => {
    return customAxiosInstance<null>({
      url: `/api/v1/profile/work-experiences/${workId}/responsibilities/${responsibilityId}`,
      method: "DELETE",
    });
  };

/**
 * Get all projects for the current user.
 * @summary Get Projects
 */
export const getProjectsApiV1ProfileProjectsGet = () => {
  return customAxiosInstance<ProjectListResponse>({
    url: `/api/v1/profile/projects`,
    method: "GET",
  });
};

/**
 * Create a new project.
 * @summary Create Project
 */
export const createProjectApiV1ProfileProjectsPost = (
  projectCreateRequest: ProjectCreateRequest
) => {
  return customAxiosInstance<ProjectResponse>({
    url: `/api/v1/profile/projects`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: projectCreateRequest,
  });
};

/**
 * Update a project.
 * @summary Update Project
 */
export const updateProjectApiV1ProfileProjectsProjectIdPut = (
  projectId: string,
  projectUpdateRequest: ProjectUpdateRequest
) => {
  return customAxiosInstance<ProjectResponse>({
    url: `/api/v1/profile/projects/${projectId}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: projectUpdateRequest,
  });
};

/**
 * Delete a project.
 * @summary Delete Project
 */
export const deleteProjectApiV1ProfileProjectsProjectIdDelete = (
  projectId: string
) => {
  return customAxiosInstance<null>({
    url: `/api/v1/profile/projects/${projectId}`,
    method: "DELETE",
  });
};

/**
 * Add a task to a project.
 * @summary Add Project Task
 */
export const addProjectTaskApiV1ProfileProjectsProjectIdTasksPost = (
  projectId: string,
  projectTaskRequest: ProjectTaskRequest
) => {
  return customAxiosInstance<ProjectTaskResponse>({
    url: `/api/v1/profile/projects/${projectId}/tasks`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: projectTaskRequest,
  });
};

/**
 * Delete a task from a project.
 * @summary Delete Project Task
 */
export const deleteProjectTaskApiV1ProfileProjectsProjectIdTasksTaskIdDelete = (
  projectId: string,
  taskId: string
) => {
  return customAxiosInstance<null>({
    url: `/api/v1/profile/projects/${projectId}/tasks/${taskId}`,
    method: "DELETE",
  });
};

/**
 * @summary Root
 */
export const rootGet = () => {
  return customAxiosInstance<unknown>({ url: `/`, method: "GET" });
};

/**
 * @summary Health Check
 */
export const healthCheckHealthGet = () => {
  return customAxiosInstance<unknown>({ url: `/health`, method: "GET" });
};

export type RegisterApiV1AuthRegisterPostResult = NonNullable<
  Awaited<ReturnType<typeof registerApiV1AuthRegisterPost>>
>;
export type LoginApiV1AuthLoginPostResult = NonNullable<
  Awaited<ReturnType<typeof loginApiV1AuthLoginPost>>
>;
export type TokenApiV1AuthTokenPostResult = NonNullable<
  Awaited<ReturnType<typeof tokenApiV1AuthTokenPost>>
>;
export type RefreshTokenApiV1AuthRefreshPostResult = NonNullable<
  Awaited<ReturnType<typeof refreshTokenApiV1AuthRefreshPost>>
>;
export type LogoutApiV1AuthLogoutPostResult = NonNullable<
  Awaited<ReturnType<typeof logoutApiV1AuthLogoutPost>>
>;
export type GetMeApiV1AuthMeGetResult = NonNullable<
  Awaited<ReturnType<typeof getMeApiV1AuthMeGet>>
>;
export type VerifyTokenApiV1AuthVerifyTokenGetResult = NonNullable<
  Awaited<ReturnType<typeof verifyTokenApiV1AuthVerifyTokenGet>>
>;
export type TestApiKeyApiV1AuthTestApiKeyGetResult = NonNullable<
  Awaited<ReturnType<typeof testApiKeyApiV1AuthTestApiKeyGet>>
>;
export type CreateJobApiV1JobsCreatePostResult = NonNullable<
  Awaited<ReturnType<typeof createJobApiV1JobsCreatePost>>
>;
export type ListJobsApiV1JobsGetResult = NonNullable<
  Awaited<ReturnType<typeof listJobsApiV1JobsGet>>
>;
export type GetJobApiV1JobsJobIdGetResult = NonNullable<
  Awaited<ReturnType<typeof getJobApiV1JobsJobIdGet>>
>;
export type GetSelectedEducationsApiV1JobsJobIdSelectedEducationsGetResult =
  NonNullable<
    Awaited<
      ReturnType<
        typeof getSelectedEducationsApiV1JobsJobIdSelectedEducationsGet
      >
    >
  >;
export type GetSelectedWorkExperiencesApiV1JobsJobIdSelectedWorkExperiencesGetResult =
  NonNullable<
    Awaited<
      ReturnType<
        typeof getSelectedWorkExperiencesApiV1JobsJobIdSelectedWorkExperiencesGet
      >
    >
  >;
export type GetSelectedProjectsApiV1JobsJobIdSelectedProjectsGetResult =
  NonNullable<
    Awaited<
      ReturnType<typeof getSelectedProjectsApiV1JobsJobIdSelectedProjectsGet>
    >
  >;
export type GetSelectedSkillsApiV1JobsJobIdSelectedSkillsGetResult =
  NonNullable<
    Awaited<ReturnType<typeof getSelectedSkillsApiV1JobsJobIdSelectedSkillsGet>>
  >;
export type ConfirmExperienceSelectionApiV1JobsJobIdConfirmExperienceSelectionPostResult =
  NonNullable<
    Awaited<
      ReturnType<
        typeof confirmExperienceSelectionApiV1JobsJobIdConfirmExperienceSelectionPost
      >
    >
  >;
export type RefineResumeApiV1JobsJobIdRefinePostResult = NonNullable<
  Awaited<ReturnType<typeof refineResumeApiV1JobsJobIdRefinePost>>
>;
export type StreamStatusApiV1JobsJobIdStatusStreamGetResult = NonNullable<
  Awaited<ReturnType<typeof streamStatusApiV1JobsJobIdStatusStreamGet>>
>;
export type GetStatusApiV1JobsJobIdStatusGetResult = NonNullable<
  Awaited<ReturnType<typeof getStatusApiV1JobsJobIdStatusGet>>
>;
export type ListResumeVersionsApiV1ResumesGetResult = NonNullable<
  Awaited<ReturnType<typeof listResumeVersionsApiV1ResumesGet>>
>;
export type CreateResumeVersionApiV1ResumesPostResult = NonNullable<
  Awaited<ReturnType<typeof createResumeVersionApiV1ResumesPost>>
>;
export type GetLatestResumeVersionApiV1ResumesLatestGetResult = NonNullable<
  Awaited<ReturnType<typeof getLatestResumeVersionApiV1ResumesLatestGet>>
>;
export type GetFullResumeApiV1ResumesVersionIdGetResult = NonNullable<
  Awaited<ReturnType<typeof getFullResumeApiV1ResumesVersionIdGet>>
>;
export type UpdateResumeVersionApiV1ResumesVersionIdPutResult = NonNullable<
  Awaited<ReturnType<typeof updateResumeVersionApiV1ResumesVersionIdPut>>
>;
export type EnhanceResumeVersionApiV1ResumesVersionIdEnhancePostResult =
  NonNullable<
    Awaited<
      ReturnType<typeof enhanceResumeVersionApiV1ResumesVersionIdEnhancePost>
    >
  >;
export type GetMetadataApiV1ResumesMetadataMetadataIdGetResult = NonNullable<
  Awaited<ReturnType<typeof getMetadataApiV1ResumesMetadataMetadataIdGet>>
>;
export type UpdateMetadataApiV1ResumesMetadataMetadataIdPutResult = NonNullable<
  Awaited<ReturnType<typeof updateMetadataApiV1ResumesMetadataMetadataIdPut>>
>;
export type EnhanceMetadataApiV1ResumesMetadataMetadataIdEnhancePostResult =
  NonNullable<
    Awaited<
      ReturnType<
        typeof enhanceMetadataApiV1ResumesMetadataMetadataIdEnhancePost
      >
    >
  >;
export type GetResumeEducationApiV1ResumesEducationsEducationIdGetResult =
  NonNullable<
    Awaited<
      ReturnType<typeof getResumeEducationApiV1ResumesEducationsEducationIdGet>
    >
  >;
export type UpdateEducationApiV1ResumesEducationsEducationIdPutResult =
  NonNullable<
    Awaited<
      ReturnType<typeof updateEducationApiV1ResumesEducationsEducationIdPut>
    >
  >;
export type EnhanceEducationApiV1ResumesEducationsEducationIdEnhancePostResult =
  NonNullable<
    Awaited<
      ReturnType<
        typeof enhanceEducationApiV1ResumesEducationsEducationIdEnhancePost
      >
    >
  >;
export type GetWorkExperienceApiV1ResumesWorkExperiencesWorkIdGetResult =
  NonNullable<
    Awaited<
      ReturnType<typeof getWorkExperienceApiV1ResumesWorkExperiencesWorkIdGet>
    >
  >;
export type UpdateWorkExperienceApiV1ResumesWorkExperiencesWorkIdPutResult =
  NonNullable<
    Awaited<
      ReturnType<
        typeof updateWorkExperienceApiV1ResumesWorkExperiencesWorkIdPut
      >
    >
  >;
export type EnhanceWorkExperienceApiV1ResumesWorkExperiencesWorkIdEnhancePostResult =
  NonNullable<
    Awaited<
      ReturnType<
        typeof enhanceWorkExperienceApiV1ResumesWorkExperiencesWorkIdEnhancePost
      >
    >
  >;
export type GetProjectApiV1ResumesProjectsProjectIdGetResult = NonNullable<
  Awaited<ReturnType<typeof getProjectApiV1ResumesProjectsProjectIdGet>>
>;
export type UpdateProjectApiV1ResumesProjectsProjectIdPutResult = NonNullable<
  Awaited<ReturnType<typeof updateProjectApiV1ResumesProjectsProjectIdPut>>
>;
export type EnhanceProjectApiV1ResumesProjectsProjectIdEnhancePostResult =
  NonNullable<
    Awaited<
      ReturnType<typeof enhanceProjectApiV1ResumesProjectsProjectIdEnhancePost>
    >
  >;
export type GetSkillApiV1ResumesSkillsSkillIdGetResult = NonNullable<
  Awaited<ReturnType<typeof getSkillApiV1ResumesSkillsSkillIdGet>>
>;
export type UpdateSkillApiV1ResumesSkillsSkillIdPutResult = NonNullable<
  Awaited<ReturnType<typeof updateSkillApiV1ResumesSkillsSkillIdPut>>
>;
export type EnhanceSkillApiV1ResumesSkillsSkillIdEnhancePostResult =
  NonNullable<
    Awaited<ReturnType<typeof enhanceSkillApiV1ResumesSkillsSkillIdEnhancePost>>
  >;
export type GetEducationsApiV1ProfileEducationsGetResult = NonNullable<
  Awaited<ReturnType<typeof getEducationsApiV1ProfileEducationsGet>>
>;
export type CreateEducationApiV1ProfileEducationsPostResult = NonNullable<
  Awaited<ReturnType<typeof createEducationApiV1ProfileEducationsPost>>
>;
export type GetProfileEducationApiV1ProfileEducationsEducationIdGetResult =
  NonNullable<
    Awaited<
      ReturnType<typeof getProfileEducationApiV1ProfileEducationsEducationIdGet>
    >
  >;
export type UpdateEducationApiV1ProfileEducationsEducationIdPutResult =
  NonNullable<
    Awaited<
      ReturnType<typeof updateEducationApiV1ProfileEducationsEducationIdPut>
    >
  >;
export type DeleteEducationApiV1ProfileEducationsEducationIdDeleteResult =
  NonNullable<
    Awaited<
      ReturnType<typeof deleteEducationApiV1ProfileEducationsEducationIdDelete>
    >
  >;
export type GetWorkExperiencesApiV1ProfileWorkExperiencesGetResult =
  NonNullable<
    Awaited<ReturnType<typeof getWorkExperiencesApiV1ProfileWorkExperiencesGet>>
  >;
export type CreateWorkExperienceApiV1ProfileWorkExperiencesPostResult =
  NonNullable<
    Awaited<
      ReturnType<typeof createWorkExperienceApiV1ProfileWorkExperiencesPost>
    >
  >;
export type UpdateWorkExperienceApiV1ProfileWorkExperiencesWorkIdPutResult =
  NonNullable<
    Awaited<
      ReturnType<
        typeof updateWorkExperienceApiV1ProfileWorkExperiencesWorkIdPut
      >
    >
  >;
export type DeleteWorkExperienceApiV1ProfileWorkExperiencesWorkIdDeleteResult =
  NonNullable<
    Awaited<
      ReturnType<
        typeof deleteWorkExperienceApiV1ProfileWorkExperiencesWorkIdDelete
      >
    >
  >;
export type AddWorkResponsibilityApiV1ProfileWorkExperiencesWorkIdResponsibilitiesPostResult =
  NonNullable<
    Awaited<
      ReturnType<
        typeof addWorkResponsibilityApiV1ProfileWorkExperiencesWorkIdResponsibilitiesPost
      >
    >
  >;
export type DeleteWorkResponsibilityApiV1ProfileWorkExperiencesWorkIdResponsibilitiesResponsibilityIdDeleteResult =
  NonNullable<
    Awaited<
      ReturnType<
        typeof deleteWorkResponsibilityApiV1ProfileWorkExperiencesWorkIdResponsibilitiesResponsibilityIdDelete
      >
    >
  >;
export type GetProjectsApiV1ProfileProjectsGetResult = NonNullable<
  Awaited<ReturnType<typeof getProjectsApiV1ProfileProjectsGet>>
>;
export type CreateProjectApiV1ProfileProjectsPostResult = NonNullable<
  Awaited<ReturnType<typeof createProjectApiV1ProfileProjectsPost>>
>;
export type UpdateProjectApiV1ProfileProjectsProjectIdPutResult = NonNullable<
  Awaited<ReturnType<typeof updateProjectApiV1ProfileProjectsProjectIdPut>>
>;
export type DeleteProjectApiV1ProfileProjectsProjectIdDeleteResult =
  NonNullable<
    Awaited<ReturnType<typeof deleteProjectApiV1ProfileProjectsProjectIdDelete>>
  >;
export type AddProjectTaskApiV1ProfileProjectsProjectIdTasksPostResult =
  NonNullable<
    Awaited<
      ReturnType<typeof addProjectTaskApiV1ProfileProjectsProjectIdTasksPost>
    >
  >;
export type DeleteProjectTaskApiV1ProfileProjectsProjectIdTasksTaskIdDeleteResult =
  NonNullable<
    Awaited<
      ReturnType<
        typeof deleteProjectTaskApiV1ProfileProjectsProjectIdTasksTaskIdDelete
      >
    >
  >;
export type RootGetResult = NonNullable<Awaited<ReturnType<typeof rootGet>>>;
export type HealthCheckHealthGetResult = NonNullable<
  Awaited<ReturnType<typeof healthCheckHealthGet>>
>;
