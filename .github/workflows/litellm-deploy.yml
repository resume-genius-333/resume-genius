name: LiteLLM Deploy

on:
  push:
    branches: ["main"]
    paths:
      - "infrastructure/docker/**"
      - "infrastructure/terraform/**"
      - ".github/workflows/litellm-deploy.yml"
      - "apps/backend/**"
  pull_request:
    paths:
      - "infrastructure/docker/**"
      - "infrastructure/terraform/**"
      - ".github/workflows/litellm-deploy.yml"
  workflow_dispatch:
    inputs:
      image_tag:
        description: "Override image tag"
        required: false

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  TF_WORKING_DIR: infrastructure/terraform/environments/dev
  ECR_REPOSITORY: ${{ secrets.LITELLM_ECR_REPOSITORY }}
  BACKEND_BUCKET: ${{ secrets.TF_STATE_BUCKET }}
  BACKEND_TABLE: ${{ secrets.TF_STATE_LOCK_TABLE }}

jobs:
  docker-build-push:
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    outputs:
      image_uri: ${{ steps.build.outputs.image }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push LiteLLM image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: infrastructure/docker/Dockerfile.litellm
          push: true
          tags: ${{ env.ECR_REPOSITORY }}:${{ github.sha }}

  terraform-plan:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      pull-requests: write
    env:
      IMAGE_TAG: ${{ github.event_name == 'workflow_dispatch' && inputs.image_tag || github.sha }}
      TERRAFORM_ENVIRONMENT: ${{ vars.TERRAFORM_ENVIRONMENT || 'dev' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init -backend-config="bucket=${{ env.BACKEND_BUCKET }}" -backend-config="key=resume-genius/litellm/${TERRAFORM_ENVIRONMENT}.tfstate" -backend-config="region=${{ env.AWS_REGION }}" -backend-config="dynamodb_table=${{ env.BACKEND_TABLE }}"

      - name: Terraform Validate
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform validate

      - name: Terraform Plan
        working-directory: ${{ env.TF_WORKING_DIR }}
        env:
          TF_VAR_litellm_container_image: ${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          TF_VAR_rds_master_password: ${{ secrets.LITELLM_DB_MASTER_PASSWORD }}
          TF_VAR_redis_auth_token_secret_arn: ${{ secrets.LITELLM_REDIS_AUTH_TOKEN_SECRET_ARN }}
          TF_VAR_litellm_secrets: ${{ secrets.LITELLM_SECRETS_JSON }}
        run: terraform plan -input=false

  terraform-apply:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [docker-build-push, terraform-plan]
    permissions:
      id-token: write
      contents: read
    env:
      IMAGE_URI: ${{ needs.docker-build-push.outputs.image_uri || format('{0}:{1}', env.ECR_REPOSITORY, github.sha) }}
      TERRAFORM_ENVIRONMENT: ${{ vars.TERRAFORM_ENVIRONMENT || 'dev' }}
      RDS_MASTER_USERNAME: ${{ vars.RDS_MASTER_USERNAME || 'litellm' }}
      RDS_DATABASE_NAME: ${{ vars.RDS_DATABASE_NAME || 'litellm' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Terraform Init
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: terraform init -backend-config="bucket=${{ env.BACKEND_BUCKET }}" -backend-config="key=resume-genius/litellm/${TERRAFORM_ENVIRONMENT}.tfstate" -backend-config="region=${{ env.AWS_REGION }}" -backend-config="dynamodb_table=${{ env.BACKEND_TABLE }}"

      - name: Terraform Apply
        working-directory: ${{ env.TF_WORKING_DIR }}
        env:
          TF_VAR_litellm_container_image: ${{ env.IMAGE_URI }}
          TF_VAR_rds_master_password: ${{ secrets.LITELLM_DB_MASTER_PASSWORD }}
          TF_VAR_redis_auth_token_secret_arn: ${{ secrets.LITELLM_REDIS_AUTH_TOKEN_SECRET_ARN }}
          TF_VAR_litellm_secrets: ${{ secrets.LITELLM_SECRETS_JSON }}
        run: terraform apply -input=false -auto-approve

      - name: Update LiteLLM DATABASE_URL secret
        working-directory: ${{ env.TF_WORKING_DIR }}
        env:
          LITELLM_SECRETS_JSON: ${{ secrets.LITELLM_SECRETS_JSON }}
          DB_PASSWORD: ${{ secrets.LITELLM_DB_MASTER_PASSWORD }}
        run: |
          set -euo pipefail
          if [ -z "${DB_PASSWORD}" ]; then
            echo "LiteLLM DB password secret is empty" >&2
            exit 1
          fi

          RDS_ENDPOINT=$(terraform output -raw rds_endpoint)
          if [ -z "${RDS_ENDPOINT}" ]; then
            echo "Unable to read rds_endpoint output" >&2
            exit 1
          fi

          SECRET_ARN=$(echo "${LITELLM_SECRETS_JSON}" | jq -r '.DATABASE_URL // empty')
          if [ -z "${SECRET_ARN}" ]; then
            echo "DATABASE_URL ARN missing from LITELLM_SECRETS_JSON" >&2
            exit 1
          fi

          DB_USERNAME="${RDS_MASTER_USERNAME}"
          DB_NAME="${RDS_DATABASE_NAME}"
          DB_URL="postgresql://${DB_USERNAME}:${DB_PASSWORD}@${RDS_ENDPOINT}:5432/${DB_NAME}"

          aws secretsmanager put-secret-value \
            --secret-id "${SECRET_ARN}" \
            --secret-string "${DB_URL}" >/dev/null

          echo "Updated DATABASE_URL secret for LiteLLM"
